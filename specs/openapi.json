{
  "openapi": "3.0.3",
  "info": {
    "title": "Kadoa API",
    "version": "3.0.0",
    "contact": {
      "name": "Support",
      "email": "support@kadoa.com"
    }
  },
  "servers": [
    {
      "url": "https://api.kadoa.com"
    }
  ],
  "paths": {
    "/v4/adhoc/{schemaId}": {
      "post": {
        "summary": "Extract data from a single webpage (Proxy to Scraper API)",
        "description": "Instantly extracts data from a webpage using either a schema for structured data or markdown/html for unstructured content. This endpoint proxies requests to the scraper API.",
        "tags": [
          "Adhoc"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "schemaId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Either a custom schema ID or one of the following special values:\n* `html` - Returns raw HTML of the page\n* `body` - Returns cleaned HTML body content\n* `markdown` - Returns content converted to markdown format\n"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "link"
                ],
                "properties": {
                  "link": {
                    "type": "string",
                    "description": "The URL link to be scraped"
                  },
                  "location": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of location, either auto or manual"
                      },
                      "isoCode": {
                        "type": "string",
                        "description": "The ISO code of the location, only required if type is manual. Available locations can be found on the locations api."
                      }
                    },
                    "description": "The location object for the proxy"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response object containing scraping data and request metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the response (SUCCESS, NO_DATA, TIMEOUT, NETWORK_ERROR, ERROR)"
                    },
                    "link": {
                      "type": "string",
                      "description": "The URL that was scraped"
                    },
                    "location": {
                      "type": "object",
                      "description": "The location object used for the proxy"
                    },
                    "data": {
                      "type": "object",
                      "description": "Validated data after scraping and processing (null for NO_DATA, TIMEOUT, etc.)"
                    },
                    "screenshotUrl": {
                      "type": "string",
                      "description": "Path to the screenshot"
                    },
                    "requestTimeMs": {
                      "type": "integer",
                      "description": "The time taken to process the request in milliseconds"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable message explaining the result (present for error/timeout scenarios)"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, either due to missing 'link' or 'schemaId'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Adhoc config not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Not enough credits",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error (rare - most failures return 200 with appropriate status)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the response (ERROR)"
                    },
                    "link": {
                      "type": "string",
                      "description": "The URL that was being scraped"
                    },
                    "location": {
                      "type": "object",
                      "description": "The location object used for the proxy"
                    },
                    "requestTimeMs": {
                      "type": "integer",
                      "description": "The time taken to process the request in milliseconds"
                    },
                    "screenshotUrl": {
                      "type": "string",
                      "description": "Path to the screenshot"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v4/changes": {
      "get": {
        "summary": "Get all data changes",
        "tags": [
          "Workflows"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "description": "Bearer token for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workflowIds",
            "in": "query",
            "required": false,
            "description": "Comma-separated list of workflow IDs. If not provided, returns changes for all ACTIVE workflows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "description": "Start date to filter changes (ISO format)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "description": "End date to filter changes (ISO format)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "description": "Number of records to skip for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Number of records to return for pagination",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow changes returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of the response"
                    },
                    "changesCount": {
                      "type": "integer",
                      "description": "Total number of changes found"
                    },
                    "changes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique identifier of the change"
                          },
                          "workflowId": {
                            "type": "string",
                            "description": "ID of the workflow this change belongs to"
                          },
                          "data": {
                            "type": "array",
                            "description": "Current state of the data after the change",
                            "items": {
                              "type": "object"
                            }
                          },
                          "differences": {
                            "type": "array",
                            "description": "Structured representation of changes with object-based diffing",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "Type of change (added, removed, or changed)",
                                  "enum": [
                                    "added",
                                    "removed",
                                    "changed"
                                  ]
                                },
                                "fields": {
                                  "type": "array",
                                  "description": "List of field changes",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "key": {
                                        "type": "string",
                                        "description": "Field name"
                                      },
                                      "value": {
                                        "type": "string",
                                        "description": "Current field value"
                                      },
                                      "previousValue": {
                                        "type": "string",
                                        "description": "Previous field value (only present for changed type)"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "url": {
                            "type": "string",
                            "description": "URL where the change was detected"
                          },
                          "screenshotUrl": {
                            "type": "string",
                            "description": "URL of the screenshot taken when the change was detected"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the change was created"
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "totalCount": {
                          "type": "integer",
                          "description": "Total number of changes found"
                        },
                        "page": {
                          "type": "integer",
                          "description": "Current page number"
                        },
                        "totalPages": {
                          "type": "integer",
                          "description": "Total number of pages"
                        },
                        "limit": {
                          "type": "integer",
                          "description": "Number of records per page"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid date range or workflow IDs)"
          },
          "401": {
            "description": "Unauthorized (invalid or missing API key or Bearer token)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET \"https://api.kadoa.com/v4/workflows/changes?workflowIds=123,456&startDate=2024-01-01T00:00:00Z&endDate=2024-03-01T00:00:00Z\" \\\n-H \"x-api-key: YOUR_API_KEY\"\n"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.kadoa.com/v4/workflows/changes\"\nheaders = {\n    \"x-api-key\": \"YOUR_API_KEY\"\n}\nparams = {\n    \"workflowIds\": \"123,456\",\n    \"startDate\": \"2024-01-01T00:00:00Z\",\n    \"endDate\": \"2024-03-01T00:00:00Z\"\n}\n\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\nprint(data)\n"
          }
        ]
      }
    },
    "/v4/changes/{changeId}": {
      "get": {
        "summary": "Get data change by ID",
        "tags": [
          "Workflows"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "description": "Bearer token for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "changeId",
            "in": "path",
            "required": true,
            "description": "ID of the workflow change to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow change returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the change"
                    },
                    "workflowId": {
                      "type": "string",
                      "description": "ID of the workflow this change belongs to"
                    },
                    "data": {
                      "type": "array",
                      "description": "Current state of the data after the change",
                      "items": {
                        "type": "object"
                      }
                    },
                    "differences": {
                      "type": "array",
                      "description": "Structured representation of changes with object-based diffing",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Type of change (added, removed, or changed)",
                            "enum": [
                              "added",
                              "removed",
                              "changed"
                            ]
                          },
                          "fields": {
                            "type": "array",
                            "description": "List of field changes",
                            "items": {
                              "type": "object",
                              "properties": {
                                "key": {
                                  "type": "string",
                                  "description": "Field name"
                                },
                                "value": {
                                  "type": "string",
                                  "description": "Current field value"
                                },
                                "previousValue": {
                                  "type": "string",
                                  "description": "Previous field value (only present for changed type)"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "url": {
                      "type": "string",
                      "description": "URL where the change was detected"
                    },
                    "screenshotUrl": {
                      "type": "string",
                      "description": "URL of the screenshot taken when the change was detected"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the change was created"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid change ID format)"
          },
          "401": {
            "description": "Unauthorized (invalid or missing API key or Bearer token)"
          },
          "403": {
            "description": "Forbidden (no access to the workflow or workflow not real-time enabled)"
          },
          "404": {
            "description": "Change not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET \"https://api.kadoa.com/v4/changes/123456789\" \\\n-H \"x-api-key: YOUR_API_KEY\"\n"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.kadoa.com/v4/changes/123456789\"\nheaders = {\n    \"x-api-key\": \"YOUR_API_KEY\"\n}\n\nresponse = requests.get(url, headers=headers)\ndata = response.json()\nprint(data)\n"
          }
        ]
      }
    },
    "/v4/files/{fileName}": {
      "get": {
        "summary": "Download a file",
        "description": "Downloads a specific file from the storage",
        "tags": [
          "Files"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "fileName",
            "in": "path",
            "required": true,
            "description": "Name of the file to download",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File content",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "File content in its original format"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - File name is required or invalid"
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "File not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v4/files/bulk-download": {
      "post": {
        "summary": "Download multiple files as a ZIP archive",
        "description": "Downloads multiple files from the storage and returns them as a ZIP archive",
        "tags": [
          "Files"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "files"
                ],
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of file names to download"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ZIP archive containing the requested files",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "ZIP archive containing the requested files"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Files list is required or invalid"
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v4/locations": {
      "get": {
        "summary": "Get all available locations",
        "tags": [
          "Locations"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of available locations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "locations": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "countryName": {
                            "type": "string",
                            "description": "Full name of the country"
                          },
                          "isoCode": {
                            "type": "string",
                            "description": "Two-letter ISO country code in uppercase"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access, either due to missing or invalid x-api-key"
          }
        }
      }
    },
    "/v4/schemas": {
      "get": {
        "summary": "Get all schemas",
        "tags": [
          "Schemas"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "description": "Bearer token for authorization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Schemas retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemasListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new schema",
        "tags": [
          "Schemas"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "description": "Bearer token for authorization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "entity",
                  "fields"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the schema"
                  },
                  "entity": {
                    "type": "string",
                    "description": "Entity type for the schema"
                  },
                  "fields": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SchemaField"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Schema created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Schema with this name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v4/schemas/{schemaId}": {
      "get": {
        "summary": "Get a specific schema by ID",
        "tags": [
          "Schemas"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "description": "Bearer token for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "in": "path",
            "required": true,
            "description": "ID of the schema to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Schema retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleSchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid schema ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Schema not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an existing schema",
        "tags": [
          "Schemas"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "description": "Bearer token for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "in": "path",
            "required": true,
            "description": "ID of the schema to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the schema"
                  },
                  "entity": {
                    "type": "string",
                    "description": "Entity type for the schema"
                  },
                  "fields": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SchemaField"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Schema updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or schema ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Schema not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Schema with this name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a schema",
        "tags": [
          "Schemas"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "description": "Bearer token for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "in": "path",
            "required": true,
            "description": "ID of the schema to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Schema deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid schema ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Schema not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v4/templates/{templateId}/auditlog": {
      "get": {
        "deprecated": true,
        "summary": "Get template audit log entries (DEPRECATED)",
        "description": "**⚠️ DEPRECATED**: This endpoint is deprecated and will be removed in Q4 2025.\nTemplate functionality has been replaced by schemas in /v4/schemas endpoints.\n",
        "tags": [
          "Templates"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "description": "Bearer token for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "description": "ID of the template to retrieve audit logs from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number for pagination",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Template audit log entries returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id",
                    "timestamp",
                    "logEntriesCount",
                    "logEntries",
                    "pagination"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Template ID"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of the response"
                    },
                    "logEntriesCount": {
                      "type": "integer",
                      "description": "Total number of log entries"
                    },
                    "logEntries": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Audit log entry ID"
                          },
                          "operationType": {
                            "type": "string",
                            "enum": [
                              "CREATE",
                              "UPDATE",
                              "DELETE"
                            ],
                            "description": "Type of operation performed"
                          },
                          "userId": {
                            "type": "string",
                            "description": "ID of the user who performed the operation"
                          },
                          "userEmail": {
                            "type": "string",
                            "description": "Email of the user who performed the operation"
                          },
                          "previousValue": {
                            "type": "object",
                            "description": "Previous state of the template"
                          },
                          "newValue": {
                            "type": "object",
                            "description": "New state of the template"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the operation was performed"
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer",
                          "description": "Current page number"
                        },
                        "limit": {
                          "type": "integer",
                          "description": "Number of items per page"
                        },
                        "totalPages": {
                          "type": "integer",
                          "description": "Total number of pages"
                        },
                        "totalCount": {
                          "type": "integer",
                          "description": "Total number of log entries"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid parameters)"
          },
          "401": {
            "description": "Unauthorized (invalid or missing API key or Bearer token)"
          },
          "404": {
            "description": "Template not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v4/templates": {
      "get": {
        "deprecated": true,
        "summary": "Get all available templates (DEPRECATED - use /v4/schemas instead)",
        "description": "**⚠️ DEPRECATED**: This endpoint is deprecated and will be removed in Q4 2025.\nPlease use GET /v4/schemas instead, which provides the same functionality with improved schema structure.\n",
        "tags": [
          "Templates"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Templates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "x-api-key missing or not authorized"
          }
        }
      }
    },
    "/v4/templates/{templateId}": {
      "get": {
        "deprecated": true,
        "summary": "Get template by ID (DEPRECATED - use /v4/schemas/{schemaId} instead)",
        "description": "**⚠️ DEPRECATED**: This endpoint is deprecated and will be removed in Q4 2025.\nPlease use GET /v4/schemas/{schemaId} instead, which provides the same functionality with improved schema structure.\n",
        "tags": [
          "Templates"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "description": "ID of the schema to retrieve (use schemaId in new endpoint)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "template retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "template": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "templateId missing"
          },
          "401": {
            "description": "x-api-key missing or not authorized"
          },
          "404": {
            "description": "templateId not found"
          }
        }
      },
      "delete": {
        "deprecated": true,
        "summary": "Delete a template (DEPRECATED - use /v4/schemas/{schemaId} instead)",
        "description": "**⚠️ DEPRECATED**: This endpoint is deprecated and will be removed in Q4 2025.\nPlease use DELETE /v4/schemas/{schemaId} instead.\n",
        "tags": [
          "Templates"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "description": "ID of the template to delete (use schemaId in new endpoint)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Template deleted successfully"
          },
          "400": {
            "description": "templateId missing"
          },
          "401": {
            "description": "x-api-key missing or not authorized"
          },
          "404": {
            "description": "Template not found"
          }
        }
      }
    },
    "/v4/templates/copy": {
      "post": {
        "deprecated": true,
        "summary": "Copy workflow to template (DEPRECATED)",
        "description": "**⚠️ DEPRECATED**: This endpoint is deprecated and will be removed in Q4 2025.\nPlease use the /v4/schemas endpoint to create schemas instead.\n",
        "tags": [
          "Templates"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "workflowId": {
                    "type": "string",
                    "description": "ID of the workflow to copy as template"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Template created successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/v4/templates/install": {
      "post": {
        "deprecated": true,
        "summary": "Install template (DEPRECATED)",
        "description": "**⚠️ DEPRECATED**: This endpoint is deprecated and will be removed in Q4 2025.\nPlease use POST /v4/workflows with schemaId parameter instead.\n",
        "tags": [
          "Templates"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userConfigId": {
                    "type": "string",
                    "description": "ID of the template to install"
                  },
                  "schema": {
                    "type": "array",
                    "description": "Schema fields"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name for the installed template"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Template installed successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v4/templates/{templateId}/rename": {
      "put": {
        "deprecated": true,
        "summary": "Rename a template (DEPRECATED - use /v4/schemas/{schemaId} instead)",
        "description": "**⚠️ DEPRECATED**: This endpoint is deprecated and will be removed in Q4 2025.\nPlease use PUT /v4/schemas/{schemaId} instead to update schema properties.\n",
        "tags": [
          "Templates"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "description": "ID of the template to rename (use schemaId in new endpoint)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "New name for the template"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Template renamed successfully"
          },
          "400": {
            "description": "Missing required fields (templateId or name)"
          },
          "401": {
            "description": "x-api-key missing or not authorized"
          },
          "404": {
            "description": "Template not found"
          }
        }
      }
    },
    "/v4/templates/{templateId}/edit": {
      "put": {
        "deprecated": true,
        "summary": "Edit a template (DEPRECATED - use /v4/schemas/{schemaId} instead)",
        "description": "**⚠️ DEPRECATED**: This endpoint is deprecated and will be removed in Q4 2025.\nPlease use PUT /v4/schemas/{schemaId} instead to update schema fields.\n",
        "tags": [
          "Templates"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "description": "ID of the template to edit (use schemaId in new endpoint)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "schema": {
                    "type": "array",
                    "description": "Updated schema fields"
                  },
                  "rebuildExisting": {
                    "type": "boolean",
                    "description": "Whether to rebuild existing workflows"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Template updated successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Template not found"
          },
          "503": {
            "description": "Service unavailable"
          }
        }
      }
    },
    "/v4/workflows": {
      "post": {
        "summary": "Create a new workflow",
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Workflows"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "title": "Workflow with Custom Schema",
                    "description": "Create a workflow by defining entity and fields directly",
                    "required": [
                      "urls",
                      "navigationMode"
                    ],
                    "properties": {
                      "entity": {
                        "type": "string",
                        "description": "Entity name for extraction (required unless using agentic-navigation mode)"
                      },
                      "fields": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/SchemaField"
                        },
                        "description": "Schema fields for extraction (required unless using agentic-navigation mode)"
                      },
                      "urls": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "List of URLs to scrape"
                      },
                      "navigationMode": {
                        "type": "string",
                        "description": "Navigation mode for scraping. When using agentic-navigation, userPrompt is required and entity/fields become optional",
                        "enum": [
                          "single-page",
                          "paginated-page",
                          "page-and-detail",
                          "agentic-navigation"
                        ]
                      },
                      "userPrompt": {
                        "type": "string",
                        "description": "Required when navigationMode is agentic-navigation. Natural language instructions for the agent (between 10 and 5000 characters)",
                        "minLength": 10,
                        "maxLength": 5000
                      },
                      "limit": {
                        "type": "integer",
                        "description": "Maximum number of items to scrape"
                      },
                      "location": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "auto",
                              "manual"
                            ]
                          },
                          "isoCode": {
                            "type": "string",
                            "description": "Country ISO code for manual location"
                          }
                        },
                        "description": "Scraping location configuration"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the workflow"
                      },
                      "description": {
                        "type": "string",
                        "maxLength": 500,
                        "description": "Optional description of the workflow (maximum 500 characters)"
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Tags for categorization"
                      },
                      "monitoring": {
                        "type": "object",
                        "description": "Monitoring configuration"
                      },
                      "interval": {
                        "type": "string",
                        "description": "Update frequency",
                        "enum": [
                          "ONLY_ONCE",
                          "EVERY_10_MINUTES",
                          "HALF_HOURLY",
                          "HOURLY",
                          "THREE_HOURLY",
                          "SIX_HOURLY",
                          "TWELVE_HOURLY",
                          "EIGHTEEN_HOURLY",
                          "DAILY",
                          "TWO_DAY",
                          "THREE_DAY",
                          "WEEKLY",
                          "BIWEEKLY",
                          "TRIWEEKLY",
                          "FOUR_WEEKLY",
                          "MONTHLY",
                          "REAL_TIME",
                          "CUSTOM"
                        ]
                      },
                      "schedules": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Cron schedules for updates"
                      },
                      "bypassPreview": {
                        "type": "boolean",
                        "description": "When true, bypasses preview and installs the scraper immediately with the given limit",
                        "default": false
                      },
                      "interactions": {
                        "type": "array",
                        "description": "Optional browser interactions to perform during scraping",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "CLICK",
                                "TYPE",
                                "HOVER",
                                "SCROLL",
                                "WAIT"
                              ],
                              "description": "Type of interaction"
                            },
                            "selector": {
                              "type": "string",
                              "description": "CSS selector for the target element"
                            },
                            "text": {
                              "type": "string",
                              "description": "Text to type (required for TYPE interactions)"
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "title": "Workflow with Existing Schema",
                    "description": "Create a workflow using an existing schema configuration",
                    "required": [
                      "schemaId",
                      "urls",
                      "navigationMode"
                    ],
                    "properties": {
                      "schemaId": {
                        "type": "string",
                        "description": "ID of existing schema configuration (not required when using agentic-navigation mode)"
                      },
                      "urls": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "List of URLs to scrape"
                      },
                      "navigationMode": {
                        "type": "string",
                        "description": "Navigation mode for scraping. When using agentic-navigation, userPrompt is required and schemaId becomes optional",
                        "enum": [
                          "single-page",
                          "paginated-page",
                          "page-and-detail",
                          "agentic-navigation"
                        ]
                      },
                      "userPrompt": {
                        "type": "string",
                        "description": "Required when navigationMode is agentic-navigation. Natural language instructions for the agent (between 10 and 5000 characters)",
                        "minLength": 10,
                        "maxLength": 5000
                      },
                      "limit": {
                        "type": "integer",
                        "description": "Maximum number of items to scrape"
                      },
                      "location": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "auto",
                              "manual"
                            ]
                          },
                          "isoCode": {
                            "type": "string",
                            "description": "Country ISO code for manual location"
                          }
                        },
                        "description": "Scraping location configuration"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the workflow"
                      },
                      "description": {
                        "type": "string",
                        "maxLength": 500,
                        "description": "Optional description of the workflow (maximum 500 characters)"
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Tags for categorization"
                      },
                      "monitoring": {
                        "type": "object",
                        "description": "Monitoring configuration"
                      },
                      "interval": {
                        "type": "string",
                        "description": "Update frequency",
                        "enum": [
                          "ONLY_ONCE",
                          "EVERY_10_MINUTES",
                          "HALF_HOURLY",
                          "HOURLY",
                          "THREE_HOURLY",
                          "SIX_HOURLY",
                          "TWELVE_HOURLY",
                          "EIGHTEEN_HOURLY",
                          "DAILY",
                          "TWO_DAY",
                          "THREE_DAY",
                          "WEEKLY",
                          "BIWEEKLY",
                          "TRIWEEKLY",
                          "FOUR_WEEKLY",
                          "MONTHLY",
                          "REAL_TIME",
                          "CUSTOM"
                        ]
                      },
                      "schedules": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Cron schedules for updates"
                      },
                      "bypassPreview": {
                        "type": "boolean",
                        "description": "When true, bypasses preview and installs the scraper immediately with the given limit",
                        "default": false
                      },
                      "interactions": {
                        "type": "array",
                        "description": "Optional browser interactions to perform during scraping",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "CLICK",
                                "TYPE",
                                "HOVER",
                                "SCROLL",
                                "WAIT"
                              ],
                              "description": "Type of interaction"
                            },
                            "selector": {
                              "type": "string",
                              "description": "CSS selector for the target element"
                            },
                            "text": {
                              "type": "string",
                              "description": "Text to type (required for TYPE interactions)"
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Workflow created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "workflowId": {
                      "type": "string",
                      "description": "ID of the created workflow"
                    },
                    "info": {
                      "type": "string",
                      "description": "Information about workflow creation",
                      "example": "Your workflow has been acknowledged and will be installed within the next 5 minutes"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "success": {
                          "type": "boolean",
                          "example": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "General error message",
                          "example": "Invalid request"
                        },
                        "validationErrors": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Detailed validation errors by field"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "Simple error message"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unauthorized access error message"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Server error message"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Service unavailable message"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get a list of workflows",
        "description": "Retrieves a list of workflows with pagination and search capabilities",
        "tags": [
          "Workflows"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter workflows by name or URL",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter workflows by state",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ACTIVE",
                "ERROR",
                "PAUSED",
                "NOT_SUPPORTED"
              ]
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Filter workflows by tags",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "monitoring",
            "in": "query",
            "description": "Filter workflows by monitoring status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "name": "updateInterval",
            "in": "query",
            "description": "Filter workflows by update interval",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "HOURLY",
                "DAILY",
                "WEEKLY",
                "MONTHLY"
              ]
            }
          },
          {
            "name": "templateId",
            "in": "query",
            "description": "Filter workflows by template ID (DEPRECATED - templates replaced by schemas)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "description": "Include deleted workflows (for compliance officers)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                true,
                false
              ],
              "default": false
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Response format (json or csv for export)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "csv"
              ],
              "default": "json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved workflows",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "workflows": {
                      "type": "array",
                      "description": "List of workflows",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "description": "Unique identifier for the workflow"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the workflow"
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of the workflow"
                          },
                          "state": {
                            "type": "string",
                            "enum": [
                              "ACTIVE",
                              "ERROR",
                              "PAUSED",
                              "NOT_SUPPORTED",
                              "PREVIEW",
                              "COMPLIANCE_REVIEW",
                              "COMPLIANCE_REJECTED",
                              "QUEUED",
                              "SETUP",
                              "DELETED"
                            ],
                            "description": "Current state of the workflow"
                          },
                          "displayState": {
                            "type": "string",
                            "enum": [
                              "ACTIVE",
                              "ERROR",
                              "PAUSED",
                              "NOT_SUPPORTED",
                              "PREVIEW",
                              "COMPLIANCE_REVIEW",
                              "COMPLIANCE_REJECTED",
                              "QUEUED",
                              "SETUP",
                              "RUNNING"
                            ],
                            "description": "Display state for frontend"
                          },
                          "userId": {
                            "type": "string",
                            "description": "ID of the user who owns the workflow"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the workflow was created"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Tags associated with the workflow"
                          },
                          "limit": {
                            "type": "integer",
                            "description": "Maximum number of items to scrape"
                          },
                          "finishedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "When the last job finished"
                          },
                          "startedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "When the last job started"
                          },
                          "protocol": {
                            "type": "string",
                            "description": "Protocol information from last job"
                          },
                          "jobId": {
                            "type": "string",
                            "description": "ID of the last job"
                          },
                          "dataKey": {
                            "type": "string",
                            "description": "Database key for the workflow data"
                          },
                          "location": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "auto",
                                  "manual"
                                ]
                              },
                              "isoCode": {
                                "type": "string",
                                "enum": [
                                  "DE",
                                  "US",
                                  "GB",
                                  "NL",
                                  "CA"
                                ]
                              }
                            },
                            "description": "Scraping location configuration"
                          },
                          "runCosts": {
                            "type": "number",
                            "description": "Cost of the last job run in credits"
                          },
                          "runState": {
                            "type": "string",
                            "description": "State of the last job run"
                          },
                          "totalRecords": {
                            "type": "integer",
                            "description": "Total number of records extracted"
                          },
                          "url": {
                            "type": "string",
                            "description": "Primary URL being scraped"
                          },
                          "urls": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "List of URLs being scraped"
                          },
                          "browserActions": {
                            "type": "array",
                            "description": "Optional browser actions to perform before extraction",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "Action type (e.g., CLICK, TYPE, WAIT, GOTO)"
                                },
                                "selector": {
                                  "type": "string",
                                  "description": "CSS selector for element-based actions"
                                },
                                "text": {
                                  "type": "string",
                                  "description": "Text to type for TYPE actions"
                                },
                                "timeMs": {
                                  "type": "integer",
                                  "description": "Milliseconds to wait for WAIT actions"
                                },
                                "url": {
                                  "type": "string",
                                  "description": "URL to navigate to for GOTO actions"
                                }
                              }
                            }
                          },
                          "schema": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SchemaField"
                            },
                            "description": "Extraction schema fields"
                          },
                          "schemaType": {
                            "type": "string",
                            "enum": [
                              "DETAIL",
                              "DIRECTORY"
                            ],
                            "description": "Type of schema (deprecated)"
                          },
                          "templateName": {
                            "type": "string",
                            "description": "Name of the template used"
                          },
                          "templateId": {
                            "type": "string",
                            "description": "ID of the template used"
                          },
                          "isSchemaEditable": {
                            "type": "boolean",
                            "description": "Whether the schema can be edited"
                          },
                          "dataValidation": {
                            "type": "object",
                            "description": "Data validation configuration",
                            "properties": {
                              "enabled": {
                                "type": "boolean",
                                "description": "Whether data validation is enabled for the workflow"
                              }
                            }
                          },
                          "validationStatistics": {
                            "type": "object",
                            "description": "Validation statistics for the workflow",
                            "properties": {
                              "total": {
                                "type": "object",
                                "properties": {
                                  "count": {
                                    "type": "number",
                                    "description": "Overall validation score"
                                  },
                                  "change": {
                                    "type": "number",
                                    "description": "Change in validation score since last validation"
                                  }
                                }
                              },
                              "byRule": {
                                "type": "object",
                                "properties": {
                                  "ruleName": {
                                    "type": "string"
                                  },
                                  "count": {
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          },
                          "monitoring": {
                            "type": "boolean",
                            "description": "Whether monitoring is enabled"
                          },
                          "notificationConfig": {
                            "type": "object",
                            "properties": {
                              "enabled": {
                                "type": "boolean"
                              },
                              "fields": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "fieldName": {
                                      "type": "string"
                                    },
                                    "operator": {
                                      "type": "string",
                                      "enum": [
                                        "changed",
                                        "added",
                                        "removed"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "description": "Monitoring configuration"
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "description": "Pagination information",
                      "properties": {
                        "totalCount": {
                          "type": "integer",
                          "description": "Total number of workflows matching the filter criteria"
                        },
                        "page": {
                          "type": "integer",
                          "description": "Current page number"
                        },
                        "totalPages": {
                          "type": "integer",
                          "description": "Total number of pages"
                        },
                        "limit": {
                          "type": "integer",
                          "description": "Number of items per page"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v4/workflows/{workflowId}/auditlog": {
      "get": {
        "summary": "Get workflow audit log entries",
        "tags": [
          "Workflows"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "description": "Bearer token for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "description": "ID of the workflow to retrieve audit logs from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number for pagination",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow audit log entries returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id",
                    "timestamp",
                    "logEntriesCount",
                    "logEntries",
                    "pagination"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Workflow ID"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of the response"
                    },
                    "logEntriesCount": {
                      "type": "integer",
                      "description": "Total number of log entries"
                    },
                    "logEntries": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Audit log entry ID"
                          },
                          "operationType": {
                            "type": "string",
                            "enum": [
                              "CREATE",
                              "UPDATE",
                              "DELETE"
                            ],
                            "description": "Type of operation performed"
                          },
                          "userId": {
                            "type": "string",
                            "description": "ID of the user who performed the operation"
                          },
                          "userEmail": {
                            "type": "string",
                            "description": "Email of the user who performed the operation"
                          },
                          "previousValue": {
                            "type": "object",
                            "description": "Previous state of the workflow"
                          },
                          "newValue": {
                            "type": "object",
                            "description": "New state of the workflow"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the operation was performed"
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer",
                          "description": "Current page number"
                        },
                        "limit": {
                          "type": "integer",
                          "description": "Number of items per page"
                        },
                        "totalPages": {
                          "type": "integer",
                          "description": "Total number of pages"
                        },
                        "totalCount": {
                          "type": "integer",
                          "description": "Total number of log entries"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid parameters)"
          },
          "401": {
            "description": "Unauthorized (invalid or missing API key or Bearer token)"
          },
          "404": {
            "description": "Workflow not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v4/workflows/{workflowId}": {
      "get": {
        "summary": "Get workflow by ID",
        "tags": [
          "Workflows"
        ],
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "description": "ID of the workflow to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "Unique identifier for the workflow"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the workflow"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the workflow"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "ACTIVE",
                        "ERROR",
                        "PAUSED",
                        "NOT_SUPPORTED",
                        "PREVIEW",
                        "COMPLIANCE_REVIEW",
                        "COMPLIANCE_REJECTED",
                        "QUEUED",
                        "SETUP",
                        "DELETED"
                      ],
                      "description": "Current state of the workflow"
                    },
                    "displayState": {
                      "type": "string",
                      "enum": [
                        "ACTIVE",
                        "ERROR",
                        "PAUSED",
                        "NOT_SUPPORTED",
                        "PREVIEW",
                        "COMPLIANCE_REVIEW",
                        "COMPLIANCE_REJECTED",
                        "QUEUED",
                        "SETUP",
                        "RUNNING"
                      ],
                      "description": "Display state for frontend"
                    },
                    "userId": {
                      "type": "string",
                      "description": "ID of the user who owns the workflow"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the workflow was created"
                    },
                    "updateInterval": {
                      "type": "string",
                      "description": "Update frequency"
                    },
                    "schedules": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Cron schedules for updates"
                    },
                    "nextInvocation": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Next scheduled execution time"
                    },
                    "monitoring": {
                      "type": "boolean",
                      "description": "Whether monitoring is enabled"
                    },
                    "location": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "auto",
                            "manual"
                          ]
                        },
                        "isoCode": {
                          "type": "string",
                          "enum": [
                            "DE",
                            "US",
                            "GB",
                            "NL",
                            "CA"
                          ]
                        }
                      },
                      "description": "Scraping location configuration"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Tags associated with the workflow"
                    },
                    "templateName": {
                      "type": "string",
                      "description": "Name of the template used"
                    },
                    "templateId": {
                      "type": "string",
                      "description": "ID of the template used"
                    },
                    "jobId": {
                      "type": "string",
                      "description": "ID of the last job"
                    },
                    "finishedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the last job finished"
                    },
                    "startedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the last job started"
                    },
                    "protocol": {
                      "type": "string",
                      "description": "Protocol information from last job"
                    },
                    "dataKey": {
                      "type": "string",
                      "description": "Database key for the workflow data"
                    },
                    "runCosts": {
                      "type": "number",
                      "description": "Cost of the last job run in credits"
                    },
                    "runState": {
                      "type": "string",
                      "description": "State of the last job run"
                    },
                    "totalRecords": {
                      "type": "integer",
                      "description": "Total number of records extracted"
                    },
                    "url": {
                      "type": "string",
                      "description": "Primary URL being scraped"
                    },
                    "urls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of URLs being scraped"
                    },
                    "browserActions": {
                      "type": "array",
                      "description": "Optional browser actions to perform before extraction",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Action type (e.g., CLICK, TYPE, WAIT, GOTO)"
                          },
                          "selector": {
                            "type": "string",
                            "description": "CSS selector for element-based actions"
                          },
                          "text": {
                            "type": "string",
                            "description": "Text to type for TYPE actions"
                          },
                          "timeMs": {
                            "type": "integer",
                            "description": "Milliseconds to wait for WAIT actions"
                          },
                          "url": {
                            "type": "string",
                            "description": "URL to navigate to for GOTO actions"
                          }
                        }
                      }
                    },
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SchemaField"
                      },
                      "description": "Extraction schema fields"
                    },
                    "rawSchema": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "Raw schema without processing"
                    },
                    "schemaType": {
                      "type": "string",
                      "enum": [
                        "DETAIL",
                        "DIRECTORY"
                      ],
                      "description": "Type of schema (deprecated)"
                    },
                    "entity": {
                      "type": "object",
                      "description": "Entity information"
                    },
                    "isSchemaEditable": {
                      "type": "boolean",
                      "description": "Whether the schema can be edited"
                    },
                    "limit": {
                      "type": "integer",
                      "description": "Maximum number of items to scrape"
                    },
                    "additionalData": {
                      "type": "object",
                      "description": "Additional static data for the workflow"
                    },
                    "dataValidation": {
                      "type": "object",
                      "description": "Data validation configuration",
                      "properties": {
                        "enabled": {
                          "type": "boolean",
                          "description": "Whether data validation is enabled"
                        },
                        "ruleCounts": {
                          "type": "object",
                          "description": "Counts of validation rules by status",
                          "properties": {
                            "enabled": {
                              "type": "integer",
                              "description": "Number of enabled validation rules"
                            },
                            "disabled": {
                              "type": "integer",
                              "description": "Number of disabled validation rules"
                            },
                            "preview": {
                              "type": "integer",
                              "description": "Number of preview validation rules"
                            }
                          }
                        }
                      }
                    },
                    "linkingColumns": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Columns configured for data linking"
                    },
                    "dataLinking": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        },
                        "linkingColumns": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "validationStatistics": {
                      "type": "object",
                      "description": "Validation statistics",
                      "properties": {
                        "count": {
                          "type": "number",
                          "description": "Overall validation score"
                        },
                        "change": {
                          "type": "number",
                          "description": "Change in validation score since last validation"
                        }
                      }
                    },
                    "notificationConfig": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        },
                        "fields": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "fieldName": {
                                "type": "string"
                              },
                              "operator": {
                                "type": "string",
                                "enum": [
                                  "changed",
                                  "added",
                                  "removed"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "description": "Monitoring configuration"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid workflowId format"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - User doesn't have required permissions"
          },
          "404": {
            "description": "Workflow not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "description": "Retrieves detailed information about a specific workflow. This endpoint requires authentication and proper\nteam access permissions.\n"
      },
      "delete": {
        "summary": "Delete a workflow",
        "tags": [
          "Workflows"
        ],
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "description": "The ID of the workflow to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow deleted successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Workflow deleted"
                }
              }
            }
          },
          "401": {
            "description": "x-api-key missing or not authorized"
          }
        }
      }
    },
    "/v4/workflows/{workflowId}/compliance-approve": {
      "put": {
        "summary": "Approve workflow for compliance",
        "tags": [
          "Workflows"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "description": "Bearer token for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "description": "ID of the workflow to approve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow approved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "workflowId": {
                      "type": "string"
                    },
                    "newState": {
                      "type": "string",
                      "enum": [
                        "ACTIVE"
                      ]
                    },
                    "actionBy": {
                      "type": "string"
                    },
                    "actionAt": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - workflow not in compliance review state"
          },
          "403": {
            "description": "Forbidden - requires COMPLIANCE_OFFICER role (no exceptions for admin/owner)"
          },
          "404": {
            "description": "Workflow not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v4/workflows/{workflowId}/compliance-reject": {
      "put": {
        "summary": "Reject workflow for compliance",
        "tags": [
          "Workflows"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "description": "Bearer token for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "description": "ID of the workflow to reject",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "reason"
                ],
                "properties": {
                  "reason": {
                    "type": "string",
                    "description": "Reason for rejecting the workflow",
                    "example": "Workflow violates data privacy policies"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow rejected successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "workflowId": {
                      "type": "string"
                    },
                    "newState": {
                      "type": "string",
                      "enum": [
                        "COMPLIANCE_REJECTED"
                      ]
                    },
                    "actionBy": {
                      "type": "string"
                    },
                    "actionAt": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - workflow not in compliance review state or missing reason"
          },
          "403": {
            "description": "Forbidden - requires COMPLIANCE_OFFICER role (no exceptions for admin/owner)"
          },
          "404": {
            "description": "Workflow not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v4/data-linker/configure-linking": {
      "post": {
        "summary": "Configure and validate data linking columns for a workflow",
        "description": "Verifies if data can be linked using specified columns and saves the configuration to the workflow",
        "tags": [
          "Data Linker"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "workflowId"
                ],
                "properties": {
                  "workflowId": {
                    "type": "string",
                    "description": "The workflow ID to configure data linking for"
                  },
                  "linkingColumns": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Columns to use for linking data"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Linking configuration saved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether the data linking is enabled"
                    },
                    "linkingColumns": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The configured linking columns"
                    },
                    "errors": {
                      "type": "array",
                      "description": "List of errors preventing data linking",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "MISSING_COLUMNS",
                              "NULL_VALUES",
                              "DUPLICATE_VALUES",
                              "TYPE_MISMATCH",
                              "INSUFFICIENT_JOBS",
                              "NO_JOBS"
                            ]
                          },
                          "message": {
                            "type": "string"
                          },
                          "details": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    },
                    "warnings": {
                      "type": "array",
                      "description": "List of warnings that don't prevent data linking",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "DATA_LOSS",
                              "PERFORMANCE"
                            ]
                          },
                          "message": {
                            "type": "string"
                          },
                          "details": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    },
                    "jobsToLink": {
                      "type": "array",
                      "description": "Jobs that would be linked if data linking is enabled",
                      "items": {
                        "type": "object",
                        "properties": {
                          "dataKey": {
                            "type": "string"
                          },
                          "_id": {
                            "type": "string"
                          },
                          "finishedAt": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "totalJobs": {
                      "type": "number",
                      "description": "Total number of jobs found"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error or data linking not possible",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Validation Error",
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "example": false
                        },
                        "error": {
                          "type": "string",
                          "example": "Invalid input"
                        },
                        "details": {
                          "type": "array",
                          "description": "Detailed validation errors",
                          "items": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              },
                              "path": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Data Linking Error",
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "example": false
                        },
                        "error": {
                          "type": "string",
                          "example": "Data linking validation failed"
                        },
                        "details": {
                          "type": "object",
                          "description": "Context about the data linking error",
                          "additionalProperties": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - no access to workflow",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "This team does not exist or you dont have the required access to this team or resource."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Workflow not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Workflow with id 'abc123' not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal server error during data linking configuration"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v4/data-linker/toggle-linking": {
      "post": {
        "summary": "Toggle data linking on/off for a workflow",
        "description": "Enable or disable data linking for a workflow",
        "tags": [
          "Data Linker"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "workflowId",
                  "enabled"
                ],
                "properties": {
                  "workflowId": {
                    "type": "string",
                    "description": "The workflow ID to toggle data linking for"
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable or disable data linking"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Data linking toggled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Data linking disabled successfully"
                    },
                    "dataLinking": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean",
                          "example": false
                        },
                        "linkingColumns": {
                          "type": "array",
                          "example": []
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input or configuration",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Validation Error",
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "example": false
                        },
                        "error": {
                          "type": "string",
                          "example": "Invalid input"
                        },
                        "details": {
                          "type": "array",
                          "description": "Detailed validation errors",
                          "items": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              },
                              "path": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "title": "Configuration Required Error",
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "example": false
                        },
                        "error": {
                          "type": "string",
                          "example": "Cannot enable data linking without configured linking columns"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user doesn't have access to the workflow",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "This team does not exist or you dont have the required access to this team or resource."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Workflow not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Workflow with id 'abc123' not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to toggle data linking"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v4/workflows/{workflowId}/data": {
      "get": {
        "summary": "Get workflow data by ID",
        "tags": [
          "Workflows"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "description": "Bearer token for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "description": "ID of the workflow to retrieve data from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runId",
            "in": "query",
            "required": false,
            "description": "ID of a specific run to retrieve data from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "description": "Format of the response data",
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "csv"
              ],
              "default": "json"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "description": "Field to sort the results by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "Sort order (ascending or descending)",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "required": false,
            "description": "JSON-encoded array of filter objects",
            "schema": {
              "type": "string"
            },
            "example": "[{\"field\":\"jobTitle\",\"operator\":\"CONTAINS\",\"value\":\"Manager\"},{\"field\":\"postedDate\",\"operator\":\"GREATER_THAN\",\"value\":\"2023-01-01\"}]"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number for pagination",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Number of items per page (0 for streaming all data)",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25
            }
          },
          {
            "name": "gzip",
            "in": "query",
            "required": false,
            "description": "Enable gzip compression for the response",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "rowIds",
            "in": "query",
            "required": false,
            "description": "Filter results by specific row IDs (comma-separated or JSON array)",
            "schema": {
              "type": "string"
            },
            "example": "id1,id2,id3"
          },
          {
            "name": "includeAnomalies",
            "in": "query",
            "required": false,
            "description": "Include validation anomalies for each row in the response",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow data returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "workflowId",
                    "data",
                    "pagination"
                  ],
                  "properties": {
                    "workflowId": {
                      "type": "string"
                    },
                    "runId": {
                      "type": "string",
                      "nullable": true
                    },
                    "executedAt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "totalCount": {
                          "type": "integer"
                        },
                        "page": {
                          "type": "integer"
                        },
                        "totalPages": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid parameters)"
          },
          "401": {
            "description": "Unauthorized (invalid or missing API key or Bearer token)"
          },
          "404": {
            "description": "Workflow or job not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-filter-options": {
          "description": "The 'filters' parameter accepts a JSON-encoded array of filter objects. Each filter object should have the following structure:\n\n{\n  \"field\": \"fieldName\",\n  \"operator\": \"OPERATOR\",\n  \"value\": \"filterValue\"\n}\n\nAvailable operators:\n- EQUALS: Exact match\n- NOT_EQUALS: Does not match\n- CONTAINS: Field contains the value (case-insensitive)\n- NOT_CONTAINS: Field does not contain the value (case-insensitive)\n- STARTS_WITH: Field starts with the value (case-insensitive)\n- ENDS_WITH: Field ends with the value (case-insensitive)\n- GREATER_THAN: Field is greater than the value\n- LESS_THAN: Field is less than the value\n- GREATER_THAN_OR_EQUAL: Field is greater than or equal to the value\n- LESS_THAN_OR_EQUAL: Field is less than or equal to the value\n- IN: Field value is in the provided array\n- NOT_IN: Field value is not in the provided array\n- IS_NULL: Field is null\n- IS_NOT_NULL: Field is not null\n- IS_EMPTY: Field is null or an empty string\n- IS_NOT_EMPTY: Field is not null and not an empty string\n\nExample:\n[\n  {\"field\": \"jobTitle\", \"operator\": \"CONTAINS\", \"value\": \"Manager\"},\n  {\"field\": \"postedDate\", \"operator\": \"GREATER_THAN\", \"value\": \"2023-01-01\"},\n  {\"field\": \"department\", \"operator\": \"IN\", \"value\": [\"Sales\", \"Marketing\"]}\n]\n"
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET \"https://api.kadoa.com/v4/workflows/123456789/data?format=json&sortBy=postedDate&order=desc&filters=%5B%7B%22field%22%3A%22jobTitle%22%2C%22operator%22%3A%22CONTAINS%22%2C%22value%22%3A%22Manager%22%7D%2C%7B%22field%22%3A%22postedDate%22%2C%22operator%22%3A%22GREATER_THAN%22%2C%22value%22%3A%222023-01-01%22%7D%5D&page=1&limit=25\" \\\n-H \"x-api-key: YOUR_API_KEY\"\n"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"https://api.kadoa.com/v4/workflows/123456789/data\"\nheaders = {\n    \"x-api-key\": \"YOUR_API_KEY\"\n}\nparams = {\n    \"format\": \"json\",\n    \"sortBy\": \"postedDate\",\n    \"order\": \"desc\",\n    \"filters\": json.dumps([\n        {\"field\": \"jobTitle\", \"operator\": \"CONTAINS\", \"value\": \"Manager\"},\n        {\"field\": \"postedDate\", \"operator\": \"GREATER_THAN\", \"value\": \"2023-01-01\"}\n    ]),\n    \"page\": 1,\n    \"limit\": 25\n}\n\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\nprint(data)\n"
          }
        ]
      }
    },
    "/v4/workflows/{workflowId}/history": {
      "get": {
        "summary": "Get the workflow run history",
        "tags": [
          "Workflows"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workflowId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the workflow whose runs history is to be retrieved"
          }
        ],
        "responses": {
          "200": {
            "description": "History of workflow runs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "workflowId": {
                      "type": "string",
                      "description": "Unique identifier of the workflow"
                    },
                    "workflowRuns": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique identifier of the workflow run"
                          },
                          "state": {
                            "type": "string",
                            "enum": [
                              "IN_PROGRESS",
                              "FINISHED",
                              "FAILED",
                              "NOT_SUPPORTED",
                              "FAILED_INSUFFICIENT_FUNDS"
                            ],
                            "description": "State of the workflow run"
                          },
                          "startedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Start date and time of the workflow run"
                          },
                          "finishedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Finish date and time of the workflow run"
                          },
                          "screenshot": {
                            "type": "string",
                            "description": "Screenshot of the navigation during the workflow run"
                          },
                          "records": {
                            "type": "integer",
                            "description": "Number of records processed in the workflow run"
                          },
                          "protocol": {
                            "type": "object",
                            "properties": {
                              "decision": {
                                "type": "string",
                                "description": "state of the run if it FAILED"
                              },
                              "reasoning": {
                                "type": "string",
                                "description": "description why the run failed"
                              }
                            }
                          },
                          "credits": {
                            "type": "number",
                            "description": "Number of credits used for this workflow run"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access, either due to missing or invalid x-api-key"
          },
          "404": {
            "description": "Workflow runs for the specified ID could not be found"
          }
        }
      }
    },
    "/v4/workflows/{workflowId}/metadata": {
      "put": {
        "summary": "Update workflow metadata",
        "tags": [
          "Workflows"
        ],
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "description": "ID of the workflow to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "integer",
                    "description": "The new limit for the workflow"
                  },
                  "updateInterval": {
                    "type": "string",
                    "description": "The new update interval for the workflow",
                    "enum": [
                      "ONLY_ONCE",
                      "HOURLY",
                      "DAILY",
                      "WEEKLY",
                      "MONTHLY",
                      "CUSTOM"
                    ]
                  },
                  "schedules": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of cron expressions for the workflow schedule"
                  },
                  "name": {
                    "type": "string",
                    "description": "The new name for the workflow"
                  },
                  "description": {
                    "type": "string",
                    "description": "The new description for the workflow"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The tags for the workflow",
                    "example": [
                      "tag1",
                      "tag2"
                    ]
                  },
                  "location": {
                    "type": "object",
                    "description": "The new location for the workflow",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "auto",
                          "manual"
                        ],
                        "description": "Type of location selection"
                      },
                      "isoCode": {
                        "type": "string",
                        "description": "ISO code of the country (required when type is manual)"
                      }
                    }
                  },
                  "monitoring": {
                    "type": "object",
                    "description": "The new monitoring config for the workflow",
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Whether monitoring is enabled for the workflow"
                      },
                      "fields": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "fieldName": {
                              "type": "string",
                              "description": "The name of the field to monitor"
                            },
                            "operator": {
                              "type": "string",
                              "enum": [
                                "changed",
                                "added",
                                "removed"
                              ],
                              "description": "The operator to use for monitoring"
                            }
                          }
                        }
                      },
                      "conditions": {
                        "type": "object",
                        "description": "The conditions for monitoring",
                        "properties": {
                          "logicalOperator": {
                            "type": "string",
                            "enum": [
                              "AND",
                              "OR"
                            ],
                            "description": "The logical operator to use for conditions"
                          },
                          "conditions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "SINGLE",
                                    "ANY"
                                  ],
                                  "description": "Type of condition"
                                },
                                "field": {
                                  "type": "string",
                                  "description": "Field name (required for SINGLE type)"
                                },
                                "operator": {
                                  "type": "string",
                                  "description": "Condition operator"
                                },
                                "value": {
                                  "type": "string",
                                  "description": "Value to compare against"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "dataLinking": {
                    "type": "object",
                    "description": "Data linking configuration for the workflow",
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Whether data linking is enabled for the workflow. Can only be enabled if linking columns are already configured."
                      }
                    }
                  },
                  "additionalData": {
                    "type": "object",
                    "description": "Additional static data for the workflow"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workflow metadata updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid input)"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Workflow not found"
          }
        }
      }
    },
    "/v4/workflows/{workflowId}/pause": {
      "put": {
        "summary": "Pause a workflow",
        "tags": [
          "Workflows"
        ],
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "description": "The ID of the workflow to pause",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow paused successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Workflow paused"
                }
              }
            }
          },
          "401": {
            "description": "x-api-key missing or not authorized"
          }
        }
      }
    },
    "/v4/workflows/{workflowId}/resume": {
      "put": {
        "summary": "Resume a workflow",
        "description": "Resumes a paused, preview, or error workflow. If the user's team/organization or any of the user's organizations has the COMPLIANCE_REVIEW rule enabled, the workflow will be sent for compliance review instead of being directly activated.",
        "tags": [
          "Workflows"
        ],
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "description": "The ID of the workflow to resume",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow resumed successfully (may be sent for compliance review if rule is enabled)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "enum": [
                        "Workflow resumed",
                        "Workflow resumed and sent for compliance review"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot resume workflow in current state"
          },
          "401": {
            "description": "x-api-key missing or not authorized"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Workflow not found"
          }
        }
      }
    },
    "/v4/workflows/{workflowId}/run": {
      "put": {
        "summary": "Run a workflow",
        "tags": [
          "Workflows"
        ],
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "description": "The ID of the workflow to run",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow started successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Workflow started"
                }
              }
            }
          },
          "400": {
            "description": "workflowId missing"
          },
          "401": {
            "description": "x-api-key missing or not authorized"
          }
        }
      }
    },
    "/v4/workflows/{workflowId}/schedule": {
      "put": {
        "summary": "Schedule a workflow",
        "tags": [
          "Workflows"
        ],
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "description": "The ID of the workflow to schedule",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow scheduled successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Workflow scheduled"
                }
              }
            }
          },
          "400": {
            "description": "Invalid date or workflowId missing"
          },
          "401": {
            "description": "x-api-key missing or not authorized"
          }
        },
        "requestBody": {
          "description": "ISO date (attention its timezone UTC) string required in request body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "example": "2023-10-07T10:00:00.000Z"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v4/workflows/setup": {
      "post": {
        "summary": "Set up a new workflow",
        "tags": [
          "Workflows"
        ],
        "requestBody": {
          "description": "Required information to set up a new workflow",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "link": {
                    "type": "string",
                    "description": "The link for the workflow",
                    "example": "https://example.com"
                  },
                  "entity": {
                    "type": "string",
                    "description": "The entity type for the workflow",
                    "example": "data"
                  },
                  "jobId": {
                    "type": "string",
                    "description": "The job identifier",
                    "example": "12345"
                  },
                  "interval": {
                    "type": "string",
                    "description": "The interval for the workflow",
                    "example": "daily"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The tags for the workflow",
                    "example": [
                      "tag1",
                      "tag2"
                    ]
                  },
                  "schedules": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The schedules for the workflow",
                    "example": [
                      "2023-10-01T10:00:00.000Z"
                    ]
                  },
                  "location": {
                    "type": "object",
                    "description": "The location for the workflow",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "auto",
                        "description": "The type of location for the workflow",
                        "enum": [
                          "auto",
                          "manual"
                        ]
                      },
                      "isoCode": {
                        "type": "string",
                        "description": "The ISO code for the location that can be fetched from the location object",
                        "example": "DE"
                      }
                    }
                  },
                  "monitoring": {
                    "type": "object",
                    "description": "Monitoring configuration for the workflow",
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Whether monitoring is enabled",
                        "example": true
                      }
                    }
                  },
                  "limit": {
                    "type": "integer",
                    "description": "The limit on the number of records",
                    "example": 100
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Workflow successfully created and scheduled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "workflowId": {
                      "type": "string",
                      "example": "605b5f5f1c4ae40b8d59f1f7"
                    },
                    "info": {
                      "type": "string",
                      "example": "Your scraper has been acknowledged and will be installed within the next 5 minutes"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or missing required fields"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Workflow not found"
          }
        }
      }
    },
    "/v4/workflows/setup/edit": {
      "post": {
        "summary": "Edit an existing workflow",
        "tags": [
          "Workflows"
        ],
        "requestBody": {
          "description": "Updated information to edit an existing workflow",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "schema": {
                    "type": "string",
                    "description": "The updated schema for the workflow",
                    "example": "{\"field1\": \"type1\", \"field2\": \"type2\"}"
                  },
                  "workflowId": {
                    "type": "string",
                    "description": "The workflow ID to edit",
                    "example": "605b5f5f1c4ae40b8d59f1f7"
                  },
                  "jobId": {
                    "type": "string",
                    "description": "The job identifier",
                    "example": "12345"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Workflow successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "workflowId": {
                      "type": "string",
                      "example": "605b5f5f1c4ae40b8d59f1f7"
                    },
                    "info": {
                      "type": "string",
                      "example": "Your workflow change has been acknowledged and will be updated within the next 5 minutes"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or missing required fields"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Workflow not found"
          }
        }
      }
    },
    "/v5/changes": {
      "get": {
        "summary": "Get all data changes (PostgreSQL)",
        "tags": [
          "Workflows"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "description": "Bearer token for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workflowIds",
            "in": "query",
            "required": false,
            "description": "Comma-separated list of workflow IDs. If not provided, returns changes for all ACTIVE workflows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "description": "Start date to filter changes (ISO format)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "description": "End date to filter changes (ISO format)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "description": "Number of records to skip for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Number of records to return for pagination",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow changes returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of the response"
                    },
                    "changesCount": {
                      "type": "integer",
                      "description": "Total number of changes found"
                    },
                    "changes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique identifier of the change"
                          },
                          "workflowId": {
                            "type": "string",
                            "description": "ID of the workflow this change belongs to"
                          },
                          "data": {
                            "type": "array",
                            "description": "Current state of the data after the change",
                            "items": {
                              "type": "object"
                            }
                          },
                          "differences": {
                            "type": "array",
                            "description": "Structured representation of changes with object-based diffing",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "Type of change (added, removed, or changed)",
                                  "enum": [
                                    "added",
                                    "removed",
                                    "changed"
                                  ]
                                },
                                "fields": {
                                  "type": "array",
                                  "description": "List of field changes",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "key": {
                                        "type": "string",
                                        "description": "Field name"
                                      },
                                      "value": {
                                        "type": "string",
                                        "description": "Current field value"
                                      },
                                      "previousValue": {
                                        "type": "string",
                                        "description": "Previous field value (only present for changed type)"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "url": {
                            "type": "string",
                            "description": "URL where the change was detected"
                          },
                          "screenshotUrl": {
                            "type": "string",
                            "description": "URL of the screenshot taken when the change was detected"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the change was created"
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "totalCount": {
                          "type": "integer",
                          "description": "Total number of changes found"
                        },
                        "page": {
                          "type": "integer",
                          "description": "Current page number"
                        },
                        "totalPages": {
                          "type": "integer",
                          "description": "Total number of pages"
                        },
                        "limit": {
                          "type": "integer",
                          "description": "Number of records per page"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid date range or workflow IDs)"
          },
          "401": {
            "description": "Unauthorized (invalid or missing API key or Bearer token)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET \"https://api.kadoa.com/v5/workflows/changes?workflowIds=123,456&startDate=2024-01-01T00:00:00Z&endDate=2024-03-01T00:00:00Z\" \\\n-H \"x-api-key: YOUR_API_KEY\"\n"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.kadoa.com/v5/workflows/changes\"\nheaders = {\n    \"x-api-key\": \"YOUR_API_KEY\"\n}\nparams = {\n    \"workflowIds\": \"123,456\",\n    \"startDate\": \"2024-01-01T00:00:00Z\",\n    \"endDate\": \"2024-03-01T00:00:00Z\"\n}\n\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\nprint(data)\n"
          }
        ]
      }
    },
    "/v5/changes/{changeId}": {
      "get": {
        "summary": "Get data change by ID (PostgreSQL)",
        "tags": [
          "Workflows"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "description": "Bearer token for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "changeId",
            "in": "path",
            "required": true,
            "description": "ID of the workflow change to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow change returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the change"
                    },
                    "workflowId": {
                      "type": "string",
                      "description": "ID of the workflow this change belongs to"
                    },
                    "data": {
                      "type": "array",
                      "description": "Current state of the data after the change",
                      "items": {
                        "type": "object"
                      }
                    },
                    "differences": {
                      "type": "array",
                      "description": "Structured representation of changes with object-based diffing",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Type of change (added, removed, or changed)",
                            "enum": [
                              "added",
                              "removed",
                              "changed"
                            ]
                          },
                          "fields": {
                            "type": "array",
                            "description": "List of field changes",
                            "items": {
                              "type": "object",
                              "properties": {
                                "key": {
                                  "type": "string",
                                  "description": "Field name"
                                },
                                "value": {
                                  "type": "string",
                                  "description": "Current field value"
                                },
                                "previousValue": {
                                  "type": "string",
                                  "description": "Previous field value (only present for changed type)"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "url": {
                      "type": "string",
                      "description": "URL where the change was detected"
                    },
                    "screenshotUrl": {
                      "type": "string",
                      "description": "URL of the screenshot taken when the change was detected"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the change was created"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid change ID format)"
          },
          "401": {
            "description": "Unauthorized (invalid or missing API key or Bearer token)"
          },
          "404": {
            "description": "Change not found or no access to the corresponding workflow"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET \"https://api.kadoa.com/v5/changes/123456789\" \\\n-H \"x-api-key: YOUR_API_KEY\"\n"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.kadoa.com/v5/changes/123456789\"\nheaders = {\n    \"x-api-key\": \"YOUR_API_KEY\"\n}\n\nresponse = requests.get(url, headers=headers)\ndata = response.json()\nprint(data)\n"
          }
        ]
      }
    },
    "/v5/compliance/auditlog": {
      "get": {
        "summary": "Export audit log for compliance (CSV format)",
        "description": "Returns a CSV export of audit log entries for compliance officers.\nProvides comprehensive audit trail data including user actions, timestamps, and changes.\nAccess restricted to compliance officers (team-scoped) and super admins (all data).\n",
        "tags": [
          "Compliance"
        ],
        "parameters": [
          {
            "name": "timeFilter",
            "in": "query",
            "required": false,
            "description": "Filter audit logs by creation time",
            "schema": {
              "type": "string",
              "enum": [
                "last-week",
                "last-month",
                "all-time"
              ],
              "default": "all-time"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "CSV file with audit log entries",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Compliance officer access required"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v5/compliance/workflows": {
      "get": {
        "summary": "Export workflows for compliance (CSV format)",
        "description": "Returns a CSV export of workflows for compliance officers.\nIncludes deleted workflows and supports time-based filtering.\nAccess restricted to compliance officers only.\n",
        "tags": [
          "Compliance"
        ],
        "parameters": [
          {
            "name": "timeFilter",
            "in": "query",
            "required": false,
            "description": "Filter workflows by creation time",
            "schema": {
              "type": "string",
              "enum": [
                "last-week",
                "last-month",
                "all-time"
              ],
              "default": "all-time"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "CSV file with workflows",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Compliance officer access required"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v5/notifications/channels": {
      "get": {
        "summary": "Retrieve all notification channels",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "workflowId",
            "schema": {
              "type": "string"
            },
            "description": "Workflow ID (optional, if provided returns channels linked to this workflow)"
          }
        ],
        "responses": {
          "200": {
            "description": "Channels retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "channels": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "channelType": {
                                "type": "string"
                              },
                              "config": {
                                "type": "object",
                                "description": "Configuration object specific to the channel type",
                                "oneOf": [
                                  {
                                    "$ref": "#/components/schemas/EmailChannelConfig"
                                  },
                                  {
                                    "$ref": "#/components/schemas/SlackChannelConfig"
                                  },
                                  {
                                    "$ref": "#/components/schemas/WebhookChannelConfig"
                                  },
                                  {
                                    "$ref": "#/components/schemas/WebsocketChannelConfig"
                                  }
                                ]
                              },
                              "createdAt": {
                                "type": "string"
                              },
                              "updatedAt": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a new notification channel",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "channelType",
                  "config"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "channelType": {
                    "type": "string",
                    "enum": [
                      "EMAIL",
                      "SLACK",
                      "WEBHOOK",
                      "WEBSOCKET"
                    ]
                  },
                  "config": {
                    "type": "object",
                    "description": "Configuration object specific to the channel type",
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/EmailChannelConfig"
                      },
                      {
                        "$ref": "#/components/schemas/SlackChannelConfig"
                      },
                      {
                        "$ref": "#/components/schemas/WebhookChannelConfig"
                      },
                      {
                        "$ref": "#/components/schemas/WebsocketChannelConfig"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Channel created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "channel": {
                          "type": "object"
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v5/notifications/channels/{channelId}": {
      "get": {
        "summary": "Retrieve a specific notification channel",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "channelId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Channel ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Channel retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "channel": {
                          "type": "object"
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Channel not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "Update a notification channel",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "channelId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Channel ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "channelType",
                  "config"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "channelType": {
                    "type": "string",
                    "enum": [
                      "EMAIL",
                      "SLACK",
                      "WEBHOOK",
                      "WEBSOCKET"
                    ]
                  },
                  "config": {
                    "type": "object",
                    "description": "Configuration object specific to the channel type",
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/EmailChannelConfig"
                      },
                      {
                        "$ref": "#/components/schemas/SlackChannelConfig"
                      },
                      {
                        "$ref": "#/components/schemas/WebhookChannelConfig"
                      },
                      {
                        "$ref": "#/components/schemas/WebsocketChannelConfig"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Channel updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "channel": {
                          "type": "object"
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Channel not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete a notification channel",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "channelId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Channel ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Channel deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "channelId": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Channel not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v5/notifications/event-types": {
      "get": {
        "summary": "Retrieve all available notification event types",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Event types retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "eventTypes": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "category": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "version": {
                                "type": "string"
                              },
                              "schema": {
                                "type": "object"
                              }
                            }
                          }
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v5/notifications/event-types/{eventType}": {
      "get": {
        "summary": "Retrieve a specific event type details",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "eventType",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Event type identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Event type details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "eventType": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string"
                            },
                            "category": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "version": {
                              "type": "string"
                            },
                            "schema": {
                              "type": "object"
                            }
                          }
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Event type not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v5/notifications/logs": {
      "get": {
        "summary": "Retrieve notification event logs",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "workflowId",
            "schema": {
              "type": "string"
            },
            "description": "Filter by workflow ID (optional)"
          },
          {
            "in": "query",
            "name": "eventType",
            "schema": {
              "type": "string"
            },
            "description": "Filter by event type (optional)"
          },
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter events from this date (optional)"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter events until this date (optional)"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 50,
              "minimum": 1,
              "maximum": 100
            },
            "description": "Number of events to return (default 50, max 100)"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            },
            "description": "Number of events to skip for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "Event logs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "events": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "workflowId": {
                                "type": "string"
                              },
                              "eventType": {
                                "type": "string"
                              },
                              "eventStatus": {
                                "type": "string"
                              },
                              "channelConfig": {
                                "type": "object"
                              },
                              "payload": {
                                "type": "object"
                              },
                              "eventId": {
                                "type": "string"
                              },
                              "createdAt": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "integer"
                            },
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "hasMore": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v5/notifications/test": {
      "post": {
        "summary": "Test a notification settings with mock data",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "description": "Event type to test (e.g., workflow_finished, workflow_data_change)",
                    "example": "workflow_finished"
                  },
                  "workflowId": {
                    "type": "string",
                    "description": "Optional workflow ID for workflow-specific testing",
                    "example": "workflow-123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Test event sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "eventId": {
                          "type": "string",
                          "description": "Unique identifier for the event"
                        },
                        "eventType": {
                          "type": "string",
                          "description": "Event type that was sent"
                        },
                        "workflowId": {
                          "type": "string",
                          "description": "Workflow ID used in the event (if provided)"
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request (missing eventType or invalid eventType)"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v5/notifications/settings": {
      "get": {
        "summary": "Retrieve all notification settings",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "workflowId",
            "schema": {
              "type": "string"
            },
            "description": "Workflow ID(s) - can be single ID, comma-separated IDs, or 'null' for workspace-level settings"
          },
          {
            "in": "query",
            "name": "eventType",
            "schema": {
              "type": "string",
              "enum": [
                "workflow_started",
                "workflow_finished",
                "workflow_failed",
                "workflow_sample_finished",
                "workflow_data_change",
                "system_maintenance",
                "service_degradation",
                "credits_low",
                "free_trial_ending"
              ]
            },
            "description": "Event type filter (optional)"
          }
        ],
        "responses": {
          "200": {
            "description": "Settings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "settings": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "workflowId": {
                                "type": "string"
                              },
                              "eventType": {
                                "type": "string"
                              },
                              "eventConfiguration": {
                                "type": "object"
                              },
                              "enabled": {
                                "type": "boolean"
                              },
                              "channels": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "channelType": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "createdAt": {
                                "type": "string"
                              },
                              "updatedAt": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a new notification settings",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "eventType",
                  "eventConfiguration"
                ],
                "properties": {
                  "workflowId": {
                    "type": "string",
                    "description": "Workflow ID (optional, if not provided creates workspace-level settings)"
                  },
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "workflow_started",
                      "workflow_finished",
                      "workflow_failed",
                      "workflow_sample_finished",
                      "workflow_data_change",
                      "system_maintenance",
                      "service_degradation",
                      "credits_low",
                      "free_trial_ending"
                    ]
                  },
                  "eventConfiguration": {
                    "type": "object",
                    "description": "Settings specific to the event type. Currently accepts an empty object {}. This object will be extended in future releases to support event-specific configuration options."
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": true
                  },
                  "channelIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of channel IDs to link to this Settings"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Settings created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "settings": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "workflowId": {
                              "type": "string"
                            },
                            "eventType": {
                              "type": "string"
                            },
                            "eventConfiguration": {
                              "type": "object"
                            },
                            "enabled": {
                              "type": "boolean"
                            },
                            "channels": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "channelType": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "createdAt": {
                              "type": "string"
                            },
                            "updatedAt": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation errors or duplicate settings)"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v5/notifications/settings/{settingsId}": {
      "get": {
        "summary": "Retrieve a specific notification settings",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "settingsId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Settings ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Settings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "settings": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "workflowId": {
                              "type": "string"
                            },
                            "eventType": {
                              "type": "string"
                            },
                            "eventConfiguration": {
                              "type": "object"
                            },
                            "enabled": {
                              "type": "boolean"
                            },
                            "channels": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "channelType": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "createdAt": {
                              "type": "string"
                            },
                            "updatedAt": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Settings not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "Update a notification settings",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "settingsId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Settings ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "workflow_started",
                      "workflow_finished",
                      "workflow_failed",
                      "workflow_sample_finished",
                      "workflow_data_change",
                      "system_maintenance",
                      "service_degradation",
                      "credits_low",
                      "free_trial_ending"
                    ]
                  },
                  "eventConfiguration": {
                    "type": "object",
                    "description": "Settings specific to the event type. Currently accepts an empty object {}. This object will be extended in future releases to support event-specific configuration options."
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "channelIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of channel IDs to link to this settings"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Settings updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "settings": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "workflowId": {
                              "type": "string"
                            },
                            "eventType": {
                              "type": "string"
                            },
                            "eventConfiguration": {
                              "type": "object"
                            },
                            "enabled": {
                              "type": "boolean"
                            },
                            "channels": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "channelType": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "createdAt": {
                              "type": "string"
                            },
                            "updatedAt": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation errors or duplicate settings)"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Settings not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete a notification settings",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "settingsId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Settings ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Settings deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "settingsId": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Settings not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v5/workflows/{workflowId}/auditlog": {
      "get": {
        "summary": "Get workflow audit log entries",
        "tags": [
          "Workflows"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "description": "Bearer token for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "description": "ID of the workflow to retrieve audit logs from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number for pagination",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow audit log entries returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id",
                    "timestamp",
                    "logEntriesCount",
                    "logEntries",
                    "pagination"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Workflow ID"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of the response"
                    },
                    "logEntriesCount": {
                      "type": "integer",
                      "description": "Total number of log entries"
                    },
                    "logEntries": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Audit log entry ID"
                          },
                          "operationType": {
                            "type": "string",
                            "enum": [
                              "CREATE",
                              "UPDATE",
                              "DELETE"
                            ],
                            "description": "Type of operation performed"
                          },
                          "userId": {
                            "type": "string",
                            "description": "ID of the user who performed the operation"
                          },
                          "userEmail": {
                            "type": "string",
                            "description": "Email of the user who performed the operation"
                          },
                          "previousValue": {
                            "type": "object",
                            "description": "Previous state of the workflow"
                          },
                          "newValue": {
                            "type": "object",
                            "description": "New state of the workflow"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the operation was performed"
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer",
                          "description": "Current page number"
                        },
                        "limit": {
                          "type": "integer",
                          "description": "Number of items per page"
                        },
                        "totalPages": {
                          "type": "integer",
                          "description": "Total number of pages"
                        },
                        "totalCount": {
                          "type": "integer",
                          "description": "Total number of log entries"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid parameters)"
          },
          "401": {
            "description": "Unauthorized (invalid or missing API key or Bearer token)"
          },
          "404": {
            "description": "Workflow not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v5/workflows": {
      "post": {
        "summary": "Create a new workflow",
        "description": "Creates a new workflow in pending state",
        "tags": [
          "Workflows"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the workflow"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Optional description of the workflow"
                  },
                  "workflowTags": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "description": "Array of tag IDs to associate with the workflow"
                  },
                  "recordLimit": {
                    "type": "integer",
                    "description": "Maximum number of records to process"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Workflow created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The ID of the created workflow"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the created workflow"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the created workflow"
                    },
                    "state": {
                      "type": "string",
                      "description": "The state of the created workflow"
                    },
                    "recordLimit": {
                      "type": "integer",
                      "description": "Maximum number of records to process"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the workflow was created"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the workflow was last updated"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error"
          },
          "401": {
            "description": "Unauthorized - missing or invalid authentication"
          },
          "403": {
            "description": "Forbidden - user doesn't have required permissions"
          }
        }
      }
    },
    "/v5/workflows/{id}": {
      "get": {
        "summary": "Get workflow by ID",
        "description": "Retrieves a specific workflow and its associated tags by ID",
        "tags": [
          "Workflows"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the workflow to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The ID of the workflow"
                    },
                    "state": {
                      "type": "string",
                      "description": "The current state of the workflow"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the workflow"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the workflow"
                    },
                    "recordsLimit": {
                      "type": "integer",
                      "description": "Maximum number of records to process"
                    },
                    "workflowTags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The ID of the tag"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the tag"
                          },
                          "description": {
                            "type": "string",
                            "description": "The description of the tag"
                          }
                        }
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the workflow was created"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the workflow was last updated"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing or invalid authentication"
          },
          "403": {
            "description": "Forbidden - user doesn't have required permissions"
          },
          "404": {
            "description": "Workflow not found"
          }
        }
      },
      "put": {
        "summary": "Update a workflow",
        "description": "Updates an existing workflow's properties",
        "tags": [
          "Workflows"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the workflow to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "New name for the workflow"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 500,
                    "description": "New description for the workflow"
                  },
                  "workflowTags": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "description": "Array of tag IDs to associate with the workflow"
                  },
                  "recordLimit": {
                    "type": "integer",
                    "description": "Maximum number of records to process"
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive",
                      "archived"
                    ],
                    "description": "New state for the workflow"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workflow updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "state": {
                      "type": "string"
                    },
                    "recordLimit": {
                      "type": "integer"
                    },
                    "workflowTags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error"
          },
          "401": {
            "description": "Unauthorized - missing or invalid authentication"
          },
          "403": {
            "description": "Forbidden - user doesn't have required permissions"
          },
          "404": {
            "description": "Workflow not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a workflow",
        "description": "Permanently deletes a workflow and its associated tags",
        "tags": [
          "Workflows"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the workflow to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Workflow deleted successfully"
          },
          "401": {
            "description": "Unauthorized - missing or invalid authentication"
          },
          "403": {
            "description": "Forbidden - user doesn't have required permissions"
          },
          "404": {
            "description": "Workflow not found"
          }
        }
      }
    },
    "/v5/workspaces/{workspaceId}/details": {
      "get": {
        "summary": "Get workspace details (supports users, teams, and organizations)",
        "tags": [
          "Workspaces"
        ],
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "description": "Workspace ID (user, team, or organization)",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "description": "Bearer token for authorization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "workspace": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Workspace ID"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "user",
                            "team",
                            "organization"
                          ],
                          "description": "Workspace type"
                        },
                        "name": {
                          "type": "string",
                          "description": "Workspace name"
                        },
                        "email": {
                          "type": "string",
                          "description": "User email (only for user type)"
                        },
                        "featureFlags": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "User feature flags (only for user type)"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "description": "Workspace description"
                        },
                        "logoUri": {
                          "type": "string",
                          "nullable": true,
                          "description": "Workspace logo URI"
                        },
                        "teams": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "name": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "error": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Workspace not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v5/workspaces/{workspaceId}/quotas": {
      "get": {
        "summary": "Get workspace quotas and usage (supports teams and organizations)",
        "tags": [
          "Workspaces"
        ],
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "description": "Workspace ID (team or organization)",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "description": "Bearer token for authorization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace quotas retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "workspace": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Workspace ID"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "team",
                            "organization"
                          ],
                          "description": "Workspace type"
                        },
                        "availableQuotas": {
                          "type": "object",
                          "properties": {
                            "activeWorkflows": {
                              "type": "integer",
                              "description": "Maximum allowed active workflows"
                            },
                            "maxExtractedRows": {
                              "type": "integer",
                              "description": "Maximum allowed extracted rows"
                            }
                          }
                        },
                        "usedQuotas": {
                          "type": "object",
                          "properties": {
                            "currentActiveWorkflows": {
                              "type": "integer",
                              "description": "Current number of active workflows"
                            },
                            "currentExtractedRows": {
                              "type": "integer",
                              "description": "Current number of extracted rows"
                            }
                          }
                        }
                      }
                    },
                    "error": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Workspace not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v5/workspaces/{workspaceId}/usage": {
      "get": {
        "summary": "Get workspace usage data (supports teams and organizations)",
        "tags": [
          "Workspaces"
        ],
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "description": "Workspace ID (team or organization)",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "resultRange",
            "in": "query",
            "required": false,
            "description": "Time range for usage data (30, 90, or 365 days)",
            "schema": {
              "type": "string",
              "enum": [
                30,
                90,
                365
              ],
              "default": 30
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "description": "API key for authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "description": "Bearer token for authorization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace usage data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "date": {
                        "type": "string",
                        "format": "date",
                        "description": "Date in YYYY-MM-DD format"
                      },
                      "activeWorkflows": {
                        "type": "integer",
                        "description": "Number of active workflows on this date"
                      },
                      "extractedRows": {
                        "type": "integer",
                        "description": "Number of extracted rows on this date"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Workspace not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v4/data-validation/rules": {
      "get": {
        "description": "List validation rules with optional filtering",
        "tags": [
          "Data Validation",
          "Rules Library"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workflowId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "preview",
                "enabled",
                "disabled"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number",
              "minimum": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "default": 50,
              "type": "number",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "schema": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RulesListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Authentication required"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected system error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "post": {
        "description": "Create a new validation rule",
        "tags": [
          "Data Validation",
          "Rules Library"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleCreateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Authentication required"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected system error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/data-validation/rules/{ruleId}": {
      "get": {
        "description": "Get a validation rule by ID",
        "tags": [
          "Data Validation",
          "Rules Library"
        ],
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Authentication required"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected system error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "put": {
        "description": "Update a validation rule",
        "tags": [
          "Data Validation",
          "Rules Library"
        ],
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleUpdateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Authentication required"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected system error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a validation rule with reason",
        "tags": [
          "Data Validation",
          "Rules Library"
        ],
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRuleWithReason"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleDeleteResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Authentication required"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected system error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/data-validation/rules/{ruleId}/disable": {
      "post": {
        "description": "Disable a validation rule with reason",
        "tags": [
          "Data Validation",
          "Rules Library"
        ],
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleDisableResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Authentication required"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected system error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/data-validation/rules/actions/generate": {
      "post": {
        "description": "Generate a validation rule",
        "tags": [
          "Data Validation",
          "Rules Library"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateRuleResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Authentication required"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected system error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/data-validation/rules/actions/generate-rules": {
      "post": {
        "description": "Generate multiple validation rules",
        "tags": [
          "Data Validation",
          "Rules Library"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateRules"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateRulesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Authentication required"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected system error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/data-validation/rules/actions/delete-all": {
      "delete": {
        "description": "Delete all validation rules with optional filtering",
        "tags": [
          "Data Validation",
          "Rules Library"
        ],
        "parameters": [
          {
            "name": "workflowId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRuleWithReason"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAllRulesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Authentication required"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected system error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/data-validation/rules/actions/bulk-approve": {
      "post": {
        "description": "Bulk approve preview rules for a workflow",
        "tags": [
          "Data Validation",
          "Rules Library"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkApproveRules"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkApproveRulesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Authentication required"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected system error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/data-validation/rules/actions/bulk-delete": {
      "post": {
        "description": "Bulk delete rules for a workflow",
        "tags": [
          "Data Validation",
          "Rules Library"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDeleteRules"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkDeleteRulesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Authentication required"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected system error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/data-validation/workflows/{workflowId}/jobs/{jobId}/validations": {
      "get": {
        "description": "List all validations for a job",
        "summary": "List all validations for a job",
        "tags": [
          "Data Validation",
          "Data Validation Report"
        ],
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number",
              "minimum": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "default": 50,
              "type": "number",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "includeDryRun",
            "in": "query",
            "description": "Include dry run validations in results",
            "schema": {
              "default": false,
              "type": "boolean",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Authentication required"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected system error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/data-validation/validations/{validationId}": {
      "get": {
        "description": "Get validation details",
        "summary": "Get validation details",
        "tags": [
          "Data Validation",
          "Data Validation Report"
        ],
        "parameters": [
          {
            "name": "validationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeDryRun",
            "in": "query",
            "description": "Include dry run validations",
            "schema": {
              "default": false,
              "type": "boolean",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataValidationReport"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Authentication required"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected system error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/data-validation/workflows/{workflowId}/jobs/{jobId}/validations/latest": {
      "get": {
        "description": "Get latest validation for a job",
        "summary": "Get latest validation",
        "tags": [
          "Data Validation",
          "Data Validation Report"
        ],
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeDryRun",
            "in": "query",
            "schema": {
              "default": false,
              "type": "boolean",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/DataValidationReport"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Authentication required"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected system error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/data-validation/workflows/{workflowId}/validations/latest": {
      "get": {
        "description": "Get latest validation for the most recent job of a workflow",
        "summary": "Get latest workflow validation",
        "tags": [
          "Data Validation",
          "Data Validation Report"
        ],
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeDryRun",
            "in": "query",
            "schema": {
              "default": false,
              "type": "boolean",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataValidationReport"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Authentication required"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected system error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/data-validation/validations/{validationId}/anomalies": {
      "get": {
        "description": "Get all anomalies for a validation",
        "summary": "Get validation anomalies",
        "tags": [
          "Data Validation",
          "Data Validation Report"
        ],
        "parameters": [
          {
            "name": "validationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number",
              "minimum": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "default": 50,
              "type": "number",
              "minimum": 1,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnomaliesByRuleResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Authentication required"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected system error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/data-validation/validations/{validationId}/anomalies/rules/{ruleName}": {
      "get": {
        "description": "Get anomalies for a specific rule",
        "summary": "Get validation anomalies by rule",
        "tags": [
          "Data Validation",
          "Data Validation Report"
        ],
        "parameters": [
          {
            "name": "validationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ruleName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The rule name (URL encoded)"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number",
              "minimum": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "default": 50,
              "type": "number",
              "minimum": 1,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnomalyRulePageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Authentication required"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected system error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/data-validation/workflows/{workflowId}/jobs/{jobId}/validate": {
      "post": {
        "description": "Schedule a data validation job",
        "summary": "Schedule a data validation job",
        "tags": [
          "Data Validation",
          "Core Validation"
        ],
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the workflow to validate"
          },
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the job to validate"
          }
        ],
        "requestBody": {
          "description": "Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataValidationRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleValidationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Authentication required"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected system error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/data-validation/{workflowId}/jobs/{jobId}/validate": {
      "post": {
        "description": "Schedule a data validation job (alternative path)",
        "summary": "Schedule a data validation job (alternative path)",
        "tags": [
          "Data Validation",
          "Core Validation"
        ],
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the workflow to validate"
          },
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the job to validate"
          }
        ],
        "requestBody": {
          "description": "Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataValidationRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleValidationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Authentication required"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected system error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/data-validation/workflows/{workflowId}/validation/toggle": {
      "put": {
        "description": "Enables or disables data validation for a specific workflow",
        "summary": "Toggle data validation for a workflow",
        "tags": [
          "Data Validation",
          "Core Validation"
        ],
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The workflow ID to update validation settings for"
          }
        ],
        "requestBody": {
          "description": "Body",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable or disable data validation for the workflow"
                  }
                },
                "required": [
                  "enabled"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Whether an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message indicating the action performed"
                    },
                    "workflowId": {
                      "type": "string",
                      "description": "The workflow ID that was updated"
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "The new validation status for the workflow"
                    }
                  },
                  "required": [
                    "error",
                    "message",
                    "workflowId",
                    "enabled"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Authentication required"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected system error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/data-validation/workflows/{workflowId}/validation/config": {
      "put": {
        "description": "Updates the complete data validation configuration including alerting settings",
        "summary": "Update data validation configuration for a workflow",
        "tags": [
          "Data Validation",
          "Core Validation"
        ],
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The workflow ID to update validation configuration for"
          }
        ],
        "requestBody": {
          "description": "Body",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dataValidation": {
                    "type": "object",
                    "properties": {
                      "enabled": {
                        "type": "boolean"
                      },
                      "alerting": {
                        "type": "object",
                        "properties": {
                          "system": {
                            "type": "object",
                            "properties": {
                              "enabled": {
                                "type": "boolean"
                              },
                              "threshold": {
                                "default": 1,
                                "type": "number"
                              }
                            },
                            "required": [
                              "enabled"
                            ],
                            "description": "System alerting configuration"
                          },
                          "user": {
                            "type": "object",
                            "properties": {
                              "enabled": {
                                "type": "boolean"
                              },
                              "threshold": {
                                "default": 1,
                                "type": "number"
                              }
                            },
                            "required": [
                              "enabled"
                            ],
                            "description": "User alerting configuration"
                          }
                        }
                      },
                      "ruleCounts": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Number of enabled validation rules"
                          },
                          "disabled": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Number of disabled validation rules"
                          },
                          "preview": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Number of preview validation rules"
                          },
                          "error": {
                            "type": "boolean",
                            "description": "Whether an error occurred while fetching counts"
                          }
                        },
                        "title": "ValidationRuleCounts",
                        "description": "Counts of validation rules by status"
                      }
                    },
                    "required": [
                      "enabled"
                    ],
                    "title": "DataValidationConfig",
                    "description": "Data validation configuration with alerting settings"
                  },
                  "dataLinking": {
                    "type": "object",
                    "properties": {
                      "enabled": {
                        "type": "boolean"
                      },
                      "linkingColumns": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "enabled",
                      "linkingColumns"
                    ],
                    "title": "DataLinkingConfig",
                    "description": "Data linking configuration"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "workflowId": {
                      "type": "string"
                    },
                    "dataValidation": {
                      "$ref": "#/components/schemas/DataValidationConfig"
                    },
                    "dataLinking": {
                      "$ref": "#/components/schemas/DataLinkingConfig"
                    },
                    "error": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "workflowId",
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Authentication required"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected system error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "get": {
        "description": "Retrieves the current data validation configuration for a specific workflow",
        "summary": "Get data validation configuration for a workflow",
        "tags": [
          "Data Validation",
          "Core Validation"
        ],
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The workflow ID to get validation configuration for"
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "workflowId": {
                      "type": "string"
                    },
                    "dataValidation": {
                      "$ref": "#/components/schemas/DataValidationConfig"
                    },
                    "dataLinking": {
                      "$ref": "#/components/schemas/DataLinkingConfig"
                    },
                    "error": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "workflowId",
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Authentication required"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected system error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/crawl/config": {
      "post": {
        "description": "Create a new crawling configuration",
        "summary": "Create config",
        "tags": [
          "Crawler"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCrawlerConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCrawlerConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "401",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "500",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a crawling configuration",
        "summary": "Delete config",
        "tags": [
          "Crawler"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCrawlerConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteCrawlerConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "401",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "500",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/crawl/config/{configId}": {
      "get": {
        "description": "Get a crawling configuration by ID",
        "summary": "Get config",
        "tags": [
          "Crawler"
        ],
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCrawlerConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "401",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "500",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/crawl/": {
      "post": {
        "description": "Create a crawling configuration and start a session in one operation (equivalent to v4/crawl)",
        "summary": "Start crawl",
        "tags": [
          "Crawler"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartCrawlerSessionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartCrawlerSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "401",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "500",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/crawl/start": {
      "post": {
        "description": "Start a new crawling session with an existing configuration",
        "summary": "Start session",
        "tags": [
          "Crawler"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartSessionWithConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartCrawlerSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "401",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "500",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/crawl/pause": {
      "post": {
        "description": "Pause an active crawling session",
        "summary": "Pause session",
        "tags": [
          "Crawler"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PauseCrawlerSessionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PauseCrawlerSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "401",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "500",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/crawl/resume": {
      "post": {
        "description": "Resume a paused crawling session",
        "summary": "Resume session",
        "tags": [
          "Crawler"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResumeCrawlerSessionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResumeCrawlerSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "401",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "500",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/crawl/{sessionId}/status": {
      "get": {
        "description": "Get the current status of a crawling session",
        "summary": "Get session status",
        "tags": [
          "Crawler"
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCrawlerSessionStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "401",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "500",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v4/crawl/{sessionId}/pages": {
      "get": {
        "description": "Get a paginated list of pages for a crawling session",
        "summary": "Get paginated session pages",
        "tags": [
          "Crawler"
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "Current page number for pagination",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCrawlerSessionPagesResponse"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "401",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "500",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/crawl/{sessionId}/pages/{pageId}": {
      "get": {
        "description": "Get the content of a specific page from a crawling session in HTML or Markdown format",
        "summary": "Get session page content",
        "tags": [
          "Crawler"
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Desired format for the page data",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCrawlerSessionPageResponse"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "401",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "500",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/crawl/bucket/data/{filenameb64}": {
      "get": {
        "description": "Get file content from the crawling bucket (HTML or screenshot)",
        "summary": "Get bucket data",
        "tags": [
          "Crawler"
        ],
        "parameters": [
          {
            "name": "filenameb64",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "description": "MIME type of the file"
            }
          },
          {
            "name": "Cache-Control",
            "in": "header",
            "schema": {
              "type": "string",
              "description": "Caching instructions for CDN and client-side caching"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GetCrawlerBucketDataResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "401",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "500",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v4/crawl/{sessionId}/list": {
      "get": {
        "description": "Get a complete list of all pages crawled in a session",
        "summary": "Get session data list",
        "tags": [
          "Crawler"
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCrawlerSessionDataListResponse"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "401",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "500",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates an error occurred"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "details": {
                      "nullable": true,
                      "description": "Additional error details (e.g., validation errors)"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "EmailChannelConfig": {
        "type": "object",
        "required": [
          "recipients"
        ],
        "properties": {
          "recipients": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "email"
            },
            "description": "Array of recipient email addresses",
            "example": [
              "user@example.com",
              "admin@company.com"
            ]
          },
          "from": {
            "type": "string",
            "format": "email",
            "description": "Sender email address (optional, must be a @kadoa.com domain email)",
            "example": "notifications@kadoa.com"
          }
        }
      },
      "SlackChannelConfig": {
        "type": "object",
        "required": [
          "slackChannelId",
          "slackChannelName"
        ],
        "properties": {
          "webhookUrl": {
            "type": "string",
            "format": "uri",
            "description": "Slack webhook URL (optional)",
            "example": "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX"
          },
          "slackChannelId": {
            "type": "string",
            "description": "Slack channel ID",
            "example": "C1234567890"
          },
          "slackChannelName": {
            "type": "string",
            "description": "Slack channel name",
            "example": "general"
          }
        }
      },
      "WebhookChannelConfig": {
        "type": "object",
        "required": [
          "webhookUrl",
          "httpMethod"
        ],
        "properties": {
          "webhookUrl": {
            "type": "string",
            "format": "uri",
            "description": "Webhook endpoint URL",
            "example": "https://api.example.com/webhook"
          },
          "httpMethod": {
            "type": "string",
            "enum": [
              "POST",
              "GET",
              "PUT",
              "PATCH"
            ],
            "description": "HTTP method for the webhook"
          },
          "auth": {
            "type": "object",
            "description": "Authentication configuration (optional)",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "bearer",
                  "basic",
                  "header"
                ],
                "description": "Authentication type"
              },
              "token": {
                "type": "string",
                "description": "Bearer token (for bearer auth)"
              },
              "username": {
                "type": "string",
                "description": "Username (for basic auth)"
              },
              "password": {
                "type": "string",
                "description": "Password (for basic auth)"
              },
              "headers": {
                "type": "object",
                "description": "Additional headers (for header auth)",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "WebsocketChannelConfig": {
        "type": "object",
        "description": "WebSocket channel configuration. Note - Only one WebSocket channel is allowed per workspace. Leave empty object {} as no configuration is needed.",
        "properties": {}
      },
      "Rule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "abc123"
          },
          "name": {
            "type": "string",
            "description": "Human-readable rule name",
            "example": "Email Validation Rule"
          },
          "description": {
            "type": "string"
          },
          "ruleType": {
            "type": "string",
            "enum": [
              "custom_sql"
            ]
          },
          "workflowId": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "teamId": {
            "type": "string"
          },
          "targetColumns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "parameters": {
            "type": "object",
            "properties": {
              "sql": {
                "type": "string"
              },
              "params": {
                "type": "array",
                "items": {
                  "nullable": true
                }
              },
              "prompt": {
                "type": "string"
              }
            },
            "required": [
              "sql"
            ]
          },
          "status": {
            "default": "enabled",
            "type": "string",
            "enum": [
              "preview",
              "enabled",
              "disabled"
            ]
          },
          "disabledReason": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          },
          "createdAt": {
            "type": "string",
            "description": "ISO 8601 timestamp",
            "example": "2024-01-15T10:30:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "ISO 8601 timestamp",
            "example": "2024-01-15T10:30:00.000Z"
          },
          "deletedAt": {
            "type": "string",
            "description": "ISO 8601 timestamp",
            "example": "2024-01-15T10:30:00.000Z",
            "nullable": true
          },
          "deletedReason": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "updatedAt"
        ],
        "title": "Rule",
        "description": "Complete validation rule with metadata and lifecycle information"
      },
      "PaginationMeta": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 1,
            "description": "Page number for pagination",
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "description": "Number of items per page",
            "example": 50
          },
          "totalItems": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of items available",
            "example": 150
          },
          "totalPages": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of pages",
            "example": 3
          }
        },
        "required": [
          "page",
          "pageSize",
          "totalItems",
          "totalPages"
        ],
        "title": "PaginationMeta",
        "description": "Metadata for paginated responses including page info and totals"
      },
      "RulesListResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rule"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        },
        "required": [
          "error",
          "data",
          "pagination"
        ],
        "title": "RulesListResponse",
        "description": "Paginated validation rules with metadata"
      },
      "CreateRule": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string"
          },
          "ruleType": {
            "type": "string",
            "enum": [
              "custom_sql"
            ]
          },
          "workflowId": {
            "type": "string",
            "minLength": 1
          },
          "targetColumns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "parameters": {
            "type": "object",
            "properties": {
              "sql": {
                "type": "string"
              },
              "params": {
                "type": "array",
                "items": {
                  "nullable": true
                }
              }
            }
          },
          "status": {
            "default": "enabled",
            "type": "string",
            "enum": [
              "preview",
              "enabled",
              "disabled"
            ]
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        },
        "required": [
          "name",
          "ruleType",
          "parameters"
        ],
        "title": "CreateRule",
        "description": "Request body for creating a new validation rule"
      },
      "RuleCreateResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Rule"
          }
        },
        "required": [
          "error",
          "message",
          "data"
        ],
        "title": "RuleCreateResponse",
        "description": "Confirmation after successful rule creation"
      },
      "RuleResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Rule"
          }
        },
        "required": [
          "error",
          "data"
        ],
        "title": "RuleResponse",
        "description": "Single validation rule details"
      },
      "UpdateRule": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string"
          },
          "targetColumns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "parameters": {
            "type": "object",
            "properties": {
              "sql": {
                "type": "string"
              },
              "params": {
                "type": "array",
                "items": {
                  "nullable": true
                }
              }
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "preview",
              "enabled",
              "disabled"
            ]
          },
          "disabledReason": {
            "type": "string",
            "maxLength": 500,
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        },
        "title": "UpdateRule",
        "description": "Partial update request for modifying validation rules"
      },
      "RuleUpdateResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Rule"
          }
        },
        "required": [
          "error",
          "message",
          "data"
        ],
        "title": "RuleUpdateResponse",
        "description": "Updated rule details after modification"
      },
      "DisableRule": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "minLength": 1,
            "maxLength": 500
          }
        },
        "required": [
          "reason"
        ],
        "title": "DisableRule",
        "description": "Request to deactivate a rule with mandatory reason"
      },
      "RuleDisableResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Rule"
          }
        },
        "required": [
          "error",
          "message",
          "data"
        ],
        "title": "RuleDisableResponse",
        "description": "Disabled rule with reason for deactivation"
      },
      "DeleteRuleWithReason": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "minLength": 1,
            "maxLength": 500
          }
        },
        "title": "DeleteRuleWithReason",
        "description": "Soft delete request with optional reason for audit trail"
      },
      "RuleDeleteResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "error",
          "message"
        ],
        "title": "RuleDeleteResponse",
        "description": "Confirmation of successful rule deletion"
      },
      "GenerateRule": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string"
          },
          "userPrompt": {
            "type": "string",
            "minLength": 1
          },
          "selectedColumns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "workflowId": {
            "type": "string"
          },
          "isPreviewRun": {
            "type": "boolean"
          }
        },
        "required": [
          "userPrompt",
          "workflowId"
        ],
        "title": "GenerateRule",
        "description": "Rule generation request with user description"
      },
      "GenerateRuleResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Rule"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "sampleDataCount": {
                "type": "number"
              },
              "schemaFieldsCount": {
                "type": "number"
              }
            }
          }
        },
        "required": [
          "error",
          "message",
          "data"
        ],
        "title": "GenerateRuleResponse",
        "description": "AI-generated rule with creation metadata"
      },
      "GenerateRules": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string"
          },
          "maxRules": {
            "default": 5,
            "type": "number",
            "minimum": 1,
            "maximum": 10
          },
          "workflowId": {
            "type": "string"
          },
          "isPreviewRun": {
            "type": "boolean"
          },
          "prompt": {
            "type": "string"
          }
        },
        "required": [
          "workflowId"
        ],
        "title": "GenerateRules",
        "description": "Request for validation rules based on data analysis"
      },
      "GenerateRulesResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rule"
            }
          },
          "metadata": {
            "type": "object",
            "properties": {
              "sampleDataCount": {
                "type": "number"
              },
              "schemaFieldsCount": {
                "type": "number"
              }
            }
          }
        },
        "required": [
          "error",
          "message",
          "data"
        ],
        "title": "GenerateRulesResponse",
        "description": "Multiple AI-generated rules with batch metadata"
      },
      "DeleteAllRulesResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "deletedCount": {
                "type": "number"
              },
              "workflowId": {
                "type": "string"
              }
            },
            "required": [
              "deletedCount"
            ]
          }
        },
        "required": [
          "error",
          "message",
          "data"
        ],
        "title": "DeleteAllRulesResponse",
        "description": "Summary of bulk rule deletion operation"
      },
      "BulkApproveRules": {
        "type": "object",
        "properties": {
          "workflowId": {
            "type": "string"
          },
          "ruleIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1
          }
        },
        "required": [
          "workflowId",
          "ruleIds"
        ],
        "title": "BulkApproveRules",
        "description": "Request to bulk approve specific preview rules for a workflow"
      },
      "BulkApproveRulesResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "approvedCount": {
                "type": "number"
              },
              "skippedCount": {
                "type": "number"
              },
              "workflowId": {
                "type": "string"
              },
              "approvedRuleIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "skippedRuleIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "approvedCount",
              "skippedCount",
              "workflowId",
              "approvedRuleIds",
              "skippedRuleIds"
            ]
          }
        },
        "required": [
          "error",
          "message",
          "data"
        ],
        "title": "BulkApproveRulesResponse",
        "description": "Summary of bulk rule approval operation with detailed results"
      },
      "BulkDeleteRules": {
        "type": "object",
        "properties": {
          "workflowId": {
            "type": "string"
          },
          "ruleIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1
          },
          "reason": {
            "type": "string",
            "minLength": 1,
            "maxLength": 500
          }
        },
        "required": [
          "workflowId",
          "ruleIds"
        ],
        "title": "BulkDeleteRules",
        "description": "Request to bulk delete specific rules for a workflow"
      },
      "BulkDeleteRulesResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "deletedCount": {
                "type": "number"
              },
              "workflowId": {
                "type": "string"
              },
              "deletedRuleIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "deletedCount",
              "workflowId",
              "deletedRuleIds"
            ]
          }
        },
        "required": [
          "error",
          "message",
          "data"
        ],
        "title": "BulkDeleteRulesResponse",
        "description": "Summary of bulk rule deletion operation with detailed results"
      },
      "DynamicRuleConfig": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Rule name"
          },
          "description": {
            "type": "string",
            "description": "What the rule checks for"
          },
          "ruleType": {
            "type": "string",
            "enum": [
              "custom_sql"
            ],
            "description": "Execution type for dynamic rules"
          },
          "targetColumns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Columns to which the rule applies"
          },
          "parameters": {
            "type": "object",
            "properties": {
              "sql": {
                "type": "string"
              }
            },
            "description": "Optional parameters for the rule execution"
          }
        },
        "required": [
          "name",
          "description",
          "ruleType",
          "parameters"
        ],
        "title": "DynamicRuleConfig",
        "description": "Configuration for custom SQL validation rules with optional parameters"
      },
      "ValidationMetadata": {
        "type": "object",
        "properties": {
          "customRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DynamicRuleConfig"
            }
          },
          "libraryRules": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Rule identifier"
                },
                "name": {
                  "type": "string",
                  "description": "Rule name"
                },
                "description": {
                  "type": "string"
                },
                "parameters": {
                  "type": "object",
                  "additionalProperties": {
                    "nullable": true
                  },
                  "description": "Pre-configured parameters for the library rule"
                },
                "targetColumns": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "id",
                "name"
              ],
              "description": "Subset of library rule fields needed for job processing"
            }
          },
          "totalRulesExecuted": {
            "type": "number"
          },
          "usedPrompt": {
            "type": "string"
          },
          "invalidRules": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "error": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "error"
              ]
            }
          },
          "recordsValidated": {
            "type": "number"
          }
        },
        "required": [
          "customRules",
          "libraryRules",
          "totalRulesExecuted",
          "recordsValidated"
        ],
        "title": "ValidationMetadata"
      },
      "Validation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "abc123"
          },
          "workflowId": {
            "type": "string"
          },
          "jobId": {
            "type": "string"
          },
          "anomaliesCountTotal": {
            "type": "number"
          },
          "anomaliesCountByRule": {
            "type": "object",
            "additionalProperties": {
              "type": "number"
            }
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ]
          },
          "completedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ValidationMetadata"
          },
          "error": {
            "type": "string"
          },
          "isDryRun": {
            "type": "boolean"
          },
          "isWorkflowTriggered": {
            "type": "boolean"
          },
          "datasetUri": {
            "type": "string",
            "nullable": true
          },
          "anomaliesParquetPath": {
            "type": "string",
            "nullable": true
          },
          "strategy": {
            "default": "ISOLATED",
            "type": "string",
            "enum": [
              "ISOLATED",
              "LINKING_COLUMNS"
            ],
            "description": "ISOLATED validates each dataset independently. LINKING_COLUMNS validates data integrity across linked columns between datasets."
          }
        },
        "required": [
          "id",
          "workflowId",
          "jobId",
          "anomaliesCountTotal",
          "anomaliesCountByRule",
          "createdAt",
          "updatedAt"
        ],
        "title": "Validation",
        "description": "Complete validation run record with anomalies count and metadata"
      },
      "ValidationListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Validation"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        },
        "required": [
          "data",
          "pagination"
        ],
        "title": "ValidationListResponse",
        "description": "Paginated validation history with summary information"
      },
      "AnomalyRow": {
        "type": "object",
        "properties": {
          "__rule__": {
            "type": "string"
          },
          "__id__": {
            "type": "string"
          },
          "__column__": {
            "type": "string"
          },
          "__type__": {
            "type": "string"
          },
          "__bad_value__": {
            "nullable": true
          },
          "__status__": {
            "type": "string",
            "enum": [
              "NEW",
              "ONGOING",
              "RESOLVED",
              "REOPENED"
            ],
            "nullable": true
          }
        },
        "required": [
          "__rule__",
          "__id__",
          "__column__",
          "__type__"
        ],
        "title": "AnomalyRow",
        "description": "Raw anomaly data with rule and column information"
      },
      "AnomalyRuleData": {
        "type": "object",
        "properties": {
          "ruleName": {
            "type": "string"
          },
          "anomalies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnomalyRow"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        },
        "required": [
          "ruleName",
          "anomalies",
          "pagination"
        ],
        "title": "AnomalyRuleData",
        "description": "Anomalies grouped by rule with pagination"
      },
      "ChangeDetectionRecord": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          },
          "change": {
            "type": "number"
          }
        },
        "required": [
          "count",
          "change"
        ],
        "title": "ChangeDetectionRecord"
      },
      "ChangeDetectionResult": {
        "type": "object",
        "properties": {
          "strategy": {
            "default": "ISOLATED",
            "type": "string",
            "enum": [
              "ISOLATED",
              "LINKING_COLUMNS"
            ],
            "description": "ISOLATED validates each dataset independently. LINKING_COLUMNS validates data integrity across linked columns between datasets."
          },
          "anomalyCountChanges": {
            "type": "object",
            "properties": {
              "previousJobId": {
                "type": "string"
              },
              "previousValidationId": {
                "type": "string"
              },
              "anomaliesCountTotal": {
                "$ref": "#/components/schemas/ChangeDetectionRecord"
              },
              "anomaliesCountByRule": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ChangeDetectionRecord"
                }
              }
            },
            "required": [
              "previousJobId",
              "previousValidationId",
              "anomaliesCountTotal",
              "anomaliesCountByRule"
            ]
          },
          "anomaliesStatusParquetPath": {
            "type": "string"
          },
          "statusCounts": {
            "type": "object",
            "properties": {
              "NEW": {
                "type": "number"
              },
              "ONGOING": {
                "type": "number"
              },
              "RESOLVED": {
                "type": "number"
              },
              "REOPENED": {
                "type": "number"
              }
            },
            "required": [
              "NEW",
              "ONGOING",
              "RESOLVED"
            ]
          }
        },
        "title": "ChangeDetectionResult"
      },
      "SchemaValidationResult": {
        "type": "object",
        "properties": {
          "missingColumns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "missingRequiredColumns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "extraColumns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "missingColumns",
          "missingRequiredColumns",
          "extraColumns"
        ],
        "title": "SchemaValidationResult",
        "description": "Comparison results between expected and actual data schema"
      },
      "DataValidationReport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "abc123"
          },
          "workflowId": {
            "type": "string"
          },
          "jobId": {
            "type": "string"
          },
          "anomaliesCountTotal": {
            "type": "number"
          },
          "anomaliesCountByRule": {
            "type": "object",
            "additionalProperties": {
              "type": "number"
            }
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ]
          },
          "completedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ValidationMetadata"
          },
          "error": {
            "type": "string"
          },
          "isDryRun": {
            "type": "boolean"
          },
          "isWorkflowTriggered": {
            "type": "boolean"
          },
          "datasetUri": {
            "type": "string",
            "nullable": true
          },
          "anomaliesParquetPath": {
            "type": "string",
            "nullable": true
          },
          "strategy": {
            "default": "ISOLATED",
            "type": "string",
            "enum": [
              "ISOLATED",
              "LINKING_COLUMNS"
            ],
            "description": "ISOLATED validates each dataset independently. LINKING_COLUMNS validates data integrity across linked columns between datasets."
          },
          "anomaliesByRule": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnomalyRuleData"
            }
          },
          "cdc": {
            "$ref": "#/components/schemas/ChangeDetectionResult"
          },
          "schemaIssues": {
            "$ref": "#/components/schemas/SchemaValidationResult"
          }
        },
        "required": [
          "id",
          "workflowId",
          "jobId",
          "anomaliesCountTotal",
          "anomaliesCountByRule",
          "createdAt",
          "updatedAt",
          "anomaliesByRule",
          "schemaIssues"
        ],
        "title": "DataValidationReport",
        "description": "Complete validation report including summary fields, anomaly details by rule, dataset location details, CDC summary, and execution strategy"
      },
      "AnomaliesByRuleResponse": {
        "type": "object",
        "properties": {
          "anomaliesByRule": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnomalyRuleData"
            }
          }
        },
        "required": [
          "anomaliesByRule"
        ],
        "title": "AnomaliesByRuleResponse",
        "description": "All anomalies grouped by validation rules"
      },
      "AnomalyRulePageResponse": {
        "type": "object",
        "properties": {
          "ruleName": {
            "type": "string"
          },
          "anomalies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnomalyRow"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        },
        "required": [
          "ruleName",
          "anomalies",
          "pagination"
        ],
        "title": "AnomalyRulePageResponse",
        "description": "Paginated anomalies for a specific rule"
      },
      "DataValidationRequestBody": {
        "type": "object",
        "properties": {
          "customRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DynamicRuleConfig"
            }
          },
          "usedPrompt": {
            "type": "string",
            "description": "Optional LLM prompt used to generate or explain rules"
          },
          "skipLibraryRules": {
            "type": "boolean",
            "description": "If true, only custom rules will be used"
          },
          "dryRun": {
            "type": "boolean",
            "description": "If true, validation runs without persisting results"
          },
          "strategy": {
            "default": "ISOLATED",
            "type": "string",
            "enum": [
              "ISOLATED",
              "LINKING_COLUMNS"
            ],
            "description": "Strategy for data validation execution"
          },
          "isWorkflowTriggered": {
            "type": "boolean",
            "description": "Internal flag: true when validation is triggered by workflow execution"
          }
        },
        "title": "DataValidationRequestBody",
        "description": "Request body for scheduling validation with custom rules and options"
      },
      "ScheduleValidationResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "validationId": {
            "type": "string",
            "description": "UUID of the scheduled validation job"
          },
          "workflowId": {
            "type": "string"
          },
          "jobId": {
            "type": "string"
          },
          "skipLibraryRules": {
            "type": "boolean"
          },
          "libraryRulesCount": {
            "type": "number"
          },
          "customRulesCount": {
            "type": "number"
          },
          "totalRulesCount": {
            "type": "number"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "error",
          "message",
          "validationId",
          "workflowId",
          "jobId",
          "skipLibraryRules",
          "libraryRulesCount",
          "customRulesCount",
          "totalRulesCount",
          "createdAt"
        ],
        "title": "ScheduleValidationResponse",
        "description": "Confirmation details after successfully scheduling a validation job"
      },
      "ValidationRuleCounts": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of enabled validation rules"
          },
          "disabled": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of disabled validation rules"
          },
          "preview": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of preview validation rules"
          },
          "error": {
            "type": "boolean",
            "description": "Whether an error occurred while fetching counts"
          }
        },
        "title": "ValidationRuleCounts",
        "description": "Counts of validation rules by status"
      },
      "DataValidationConfig": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "alerting": {
            "type": "object",
            "properties": {
              "system": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  },
                  "threshold": {
                    "default": 1,
                    "type": "number"
                  }
                },
                "required": [
                  "enabled"
                ],
                "description": "System alerting configuration"
              },
              "user": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  },
                  "threshold": {
                    "default": 1,
                    "type": "number"
                  }
                },
                "required": [
                  "enabled"
                ],
                "description": "User alerting configuration"
              }
            }
          },
          "ruleCounts": {
            "$ref": "#/components/schemas/ValidationRuleCounts"
          }
        },
        "required": [
          "enabled"
        ],
        "title": "DataValidationConfig",
        "description": "Configuration for data validation"
      },
      "DataLinkingConfig": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "linkingColumns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "enabled",
          "linkingColumns"
        ],
        "title": "DataLinkingConfig",
        "description": "Configuration for data linking"
      },
      "CreateCrawlerConfigRequest": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "Single URL to start crawling (for backward compatibility)"
          },
          "startUrls": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri",
              "minLength": 1
            },
            "description": "List of URLs for crawling"
          },
          "pathsFilterIn": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Regex patterns to include specific paths"
          },
          "pathsFilterOut": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Regex patterns to exclude specific paths"
          },
          "proxyType": {
            "type": "string",
            "nullable": true,
            "description": "Type of proxy to use"
          },
          "proxyCountry": {
            "type": "string",
            "nullable": true,
            "description": "Country for proxy selection"
          },
          "timeout": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": 0,
            "description": "Timeout in milliseconds"
          },
          "maxDepth": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": 0,
            "description": "Maximum crawling depth"
          },
          "maxPages": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": 0,
            "description": "Maximum number of pages to crawl"
          },
          "concurrency": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": 0,
            "description": "Number of concurrent crawlers"
          },
          "strictDomain": {
            "default": true,
            "type": "boolean",
            "description": "Whether to stay within the same domain"
          },
          "loadImages": {
            "default": true,
            "type": "boolean",
            "description": "Whether to load images during crawling"
          },
          "safeMode": {
            "default": false,
            "type": "boolean",
            "description": "Enable safe mode for crawling"
          },
          "callbackUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "Webhook URL for completion notifications"
          }
        },
        "title": "CreateCrawlerConfigRequest",
        "description": "Request body for creating a new crawling configuration"
      },
      "CreateCrawlerConfigResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "Single URL to start crawling (for backward compatibility)"
          },
          "startUrls": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri",
              "minLength": 1
            },
            "description": "List of URLs for crawling"
          },
          "pathsFilterIn": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Regex patterns to include specific paths"
          },
          "pathsFilterOut": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Regex patterns to exclude specific paths"
          },
          "proxyType": {
            "type": "string",
            "nullable": true,
            "description": "Type of proxy to use"
          },
          "proxyCountry": {
            "type": "string",
            "nullable": true,
            "description": "Country for proxy selection"
          },
          "timeout": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": 0,
            "description": "Timeout in milliseconds"
          },
          "maxDepth": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": 0,
            "description": "Maximum crawling depth"
          },
          "maxPages": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": 0,
            "description": "Maximum number of pages to crawl"
          },
          "concurrency": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": 0,
            "description": "Number of concurrent crawlers"
          },
          "strictDomain": {
            "default": true,
            "type": "boolean",
            "description": "Whether to stay within the same domain"
          },
          "loadImages": {
            "default": true,
            "type": "boolean",
            "description": "Whether to load images during crawling"
          },
          "safeMode": {
            "default": false,
            "type": "boolean",
            "description": "Enable safe mode for crawling"
          },
          "callbackUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "Webhook URL for completion notifications"
          },
          "configId": {
            "type": "string",
            "description": "Config ID"
          },
          "userId": {
            "type": "string",
            "description": "User ID"
          },
          "createdAt": {
            "type": "string",
            "description": "Created at"
          }
        },
        "required": [
          "configId",
          "userId",
          "createdAt"
        ],
        "title": "CreateCrawlerConfigResponse",
        "description": "Response schema for creating a new crawling configuration"
      },
      "GetCrawlerConfigResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "Single URL to start crawling (for backward compatibility)"
          },
          "startUrls": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri",
              "minLength": 1
            },
            "description": "List of URLs for crawling"
          },
          "pathsFilterIn": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Regex patterns to include specific paths"
          },
          "pathsFilterOut": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Regex patterns to exclude specific paths"
          },
          "proxyType": {
            "type": "string",
            "nullable": true,
            "description": "Type of proxy to use"
          },
          "proxyCountry": {
            "type": "string",
            "nullable": true,
            "description": "Country for proxy selection"
          },
          "timeout": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": 0,
            "description": "Timeout in milliseconds"
          },
          "maxDepth": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": 0,
            "description": "Maximum crawling depth"
          },
          "maxPages": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": 0,
            "description": "Maximum number of pages to crawl"
          },
          "concurrency": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": 0,
            "description": "Number of concurrent crawlers"
          },
          "strictDomain": {
            "default": true,
            "type": "boolean",
            "description": "Whether to stay within the same domain"
          },
          "loadImages": {
            "default": true,
            "type": "boolean",
            "description": "Whether to load images during crawling"
          },
          "safeMode": {
            "default": false,
            "type": "boolean",
            "description": "Enable safe mode for crawling"
          },
          "callbackUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "Webhook URL for completion notifications"
          },
          "configId": {
            "type": "string",
            "description": "Config ID"
          },
          "userId": {
            "type": "string",
            "description": "User ID"
          },
          "createdAt": {
            "type": "string",
            "description": "Created at"
          }
        },
        "required": [
          "configId",
          "userId",
          "createdAt"
        ],
        "title": "GetCrawlerConfigResponse",
        "description": "Response schema for getting a crawling configuration"
      },
      "DeleteCrawlerConfigRequest": {
        "type": "object",
        "properties": {
          "configId": {
            "type": "string",
            "description": "Config ID"
          }
        },
        "required": [
          "configId"
        ],
        "title": "DeleteCrawlerConfigRequest",
        "description": "Schema for deleting a crawling configuration"
      },
      "DeleteCrawlerConfigResponse": {
        "type": "object",
        "properties": {
          "configId": {
            "type": "string",
            "description": "Config ID"
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether the config was deleted"
          }
        },
        "required": [
          "configId",
          "deleted"
        ],
        "title": "DeleteCrawlerConfigResponse",
        "description": "Response schema for deleting a crawling configuration"
      },
      "StartCrawlerSessionRequest": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "Single URL to start crawling (for backward compatibility)"
          },
          "startUrls": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri",
              "minLength": 1
            },
            "description": "List of URLs for crawling"
          },
          "pathsFilterIn": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Regex patterns to include specific paths"
          },
          "pathsFilterOut": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Regex patterns to exclude specific paths"
          },
          "proxyType": {
            "type": "string",
            "nullable": true,
            "description": "Type of proxy to use"
          },
          "proxyCountry": {
            "type": "string",
            "nullable": true,
            "description": "Country for proxy selection"
          },
          "timeout": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": 0,
            "description": "Timeout in milliseconds"
          },
          "maxDepth": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": 0,
            "description": "Maximum crawling depth"
          },
          "maxPages": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": 0,
            "description": "Maximum number of pages to crawl"
          },
          "concurrency": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": 0,
            "description": "Number of concurrent crawlers"
          },
          "strictDomain": {
            "default": true,
            "type": "boolean",
            "description": "Whether to stay within the same domain"
          },
          "loadImages": {
            "default": true,
            "type": "boolean",
            "description": "Whether to load images during crawling"
          },
          "safeMode": {
            "default": false,
            "type": "boolean",
            "description": "Enable safe mode for crawling"
          },
          "callbackUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "Webhook URL for completion notifications"
          }
        },
        "title": "StartCrawlerSessionRequest",
        "description": "Schema for starting a crawling session with support for both single URL and multiple URLs"
      },
      "StartCrawlerSessionResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "sessionId": {
            "type": "string",
            "description": "Session ID"
          },
          "configId": {
            "type": "string",
            "description": "Config ID (included when creating config and starting session)"
          },
          "error": {
            "type": "string",
            "description": "Error message if any",
            "nullable": true
          }
        },
        "required": [
          "message",
          "sessionId",
          "error"
        ],
        "title": "StartCrawlerSessionResponse",
        "description": "Response schema for starting a crawling session"
      },
      "StartSessionWithConfigRequest": {
        "type": "object",
        "properties": {
          "configId": {
            "type": "string",
            "description": "Configuration ID to use for this session"
          }
        },
        "required": [
          "configId"
        ],
        "title": "StartSessionWithConfigRequest",
        "description": "Schema for starting a session with an existing configuration"
      },
      "PauseCrawlerSessionRequest": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "description": "Session ID"
          }
        },
        "required": [
          "sessionId"
        ],
        "title": "PauseCrawlerSessionRequest",
        "description": "Schema for pausing a crawling session"
      },
      "PauseCrawlerSessionResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "sessionId": {
            "type": "string",
            "description": "Session ID"
          },
          "error": {
            "type": "string",
            "description": "Error message if any",
            "nullable": true
          }
        },
        "required": [
          "message",
          "sessionId",
          "error"
        ],
        "title": "PauseCrawlerSessionResponse",
        "description": "Response schema for pausing a crawling session"
      },
      "ResumeCrawlerSessionRequest": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "description": "Session ID"
          }
        },
        "required": [
          "sessionId"
        ],
        "title": "ResumeCrawlerSessionRequest",
        "description": "Schema for resuming a crawling session"
      },
      "ResumeCrawlerSessionResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "sessionId": {
            "type": "string",
            "description": "Session ID"
          },
          "error": {
            "type": "string",
            "description": "Error message if any",
            "nullable": true
          }
        },
        "required": [
          "message",
          "sessionId",
          "error"
        ],
        "title": "ResumeCrawlerSessionResponse",
        "description": "Response schema for resuming a crawling session"
      },
      "GetCrawlerSessionStatusResponse": {
        "type": "object",
        "properties": {
          "payload": {
            "description": "Details about the crawling session status",
            "nullable": true
          },
          "sessionId": {
            "type": "string",
            "description": "Session ID"
          },
          "error": {
            "type": "string",
            "description": "Error message if any",
            "nullable": true
          }
        },
        "required": [
          "sessionId",
          "error"
        ],
        "title": "GetCrawlerSessionStatusResponse",
        "description": "Response schema for getting a crawling session status"
      },
      "GetCrawlerSessionPagesResponse": {
        "type": "object",
        "properties": {
          "payload": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the crawled page"
                },
                "url": {
                  "type": "string",
                  "description": "URL of the crawled page"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "DONE",
                    "CRAWLING",
                    "PENDING"
                  ],
                  "description": "Status of the page crawl"
                }
              },
              "required": [
                "id",
                "url",
                "status"
              ]
            },
            "description": "List of crawled pages with statuses"
          },
          "pagination": {
            "type": "object",
            "properties": {
              "page": {
                "type": "number",
                "description": "Current page number"
              },
              "pageSize": {
                "type": "number",
                "description": "Items per page"
              },
              "totalItems": {
                "type": "number",
                "description": "Total number of items"
              },
              "totalPages": {
                "type": "number",
                "description": "Total number of pages"
              },
              "hasMore": {
                "type": "boolean",
                "description": "Whether there are more pages"
              }
            },
            "required": [
              "page",
              "pageSize",
              "totalItems",
              "totalPages",
              "hasMore"
            ],
            "description": "Pagination details"
          },
          "sessionId": {
            "type": "string",
            "description": "ID of the crawling session"
          },
          "error": {
            "type": "string",
            "description": "Error message if any",
            "nullable": true
          }
        },
        "required": [
          "payload",
          "pagination",
          "sessionId",
          "error"
        ],
        "title": "GetCrawlerSessionPagesResponse",
        "description": "Response schema for getting paginated session pages"
      },
      "GetCrawlerSessionPageResponse": {
        "type": "object",
        "properties": {
          "payload": {
            "description": "Data associated with the specific page",
            "nullable": true
          },
          "pageId": {
            "type": "string",
            "description": "Unique ID of the page"
          },
          "pageFormat": {
            "type": "string",
            "description": "Format of the retrieved page data"
          },
          "sessionId": {
            "type": "string",
            "description": "Session ID"
          },
          "error": {
            "type": "string",
            "description": "Error message if any",
            "nullable": true
          }
        },
        "required": [
          "pageId",
          "pageFormat",
          "sessionId",
          "error"
        ],
        "title": "GetCrawlerSessionPageResponse",
        "description": "Response schema for getting a specific session page content"
      },
      "GetCrawlerBucketDataResponse": {
        "title": "GetCrawlerBucketDataResponse",
        "description": "Response schema for getting a crawling bucket data - returns file stream for HTML/images"
      },
      "GetCrawlerSessionDataListResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "number",
            "description": "Total number of pages in the session"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "description": "URL of the page"
                },
                "status": {
                  "type": "string",
                  "description": "Status of the page"
                },
                "created_at": {
                  "type": "string",
                  "description": "Timestamp when the entry was created"
                },
                "html_filename": {
                  "type": "string",
                  "description": "Base64 encoded filename for the HTML content"
                },
                "screenshot_filename": {
                  "type": "string",
                  "description": "Base64 encoded filename for the screenshot"
                }
              },
              "required": [
                "url",
                "status",
                "created_at",
                "html_filename",
                "screenshot_filename"
              ]
            },
            "description": "List of pages in the session"
          }
        },
        "required": [
          "totalPages",
          "data"
        ],
        "title": "GetCrawlerSessionDataListResponse",
        "description": "Response schema for getting a crawling session data list"
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key",
        "description": "API key for authentication"
      },
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Bearer token for authentication"
      }
    }
  }
}