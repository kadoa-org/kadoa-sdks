name: Claude Code Review

on:
    pull_request:
        types: [opened, synchronize, ready_for_review, reopened]
        # Only review code changes, skip docs-only PRs
        paths:
            - "sdks/**/*.ts"
            - "tools/**/*.ts"
            - ".github/workflows/**"
    issue_comment:
        types: [created]
    pull_request_review_comment:
        types: [created]
    workflow_dispatch:

permissions:
    contents: read
    pull-requests: write
    issues: write
    id-token: write

jobs:
    claude-review:
        name: Review PR with Claude
        runs-on: ubuntu-latest
        # Skip review for WIP PRs or if explicitly disabled
        if: |
            !contains(github.event.pull_request.title, '[skip-review]') &&
            !contains(github.event.pull_request.title, '[WIP]') &&
            !contains(github.event.pull_request.title, 'WIP:')
        steps:
            - name: Checkout code
              uses: actions/checkout@v5
              with:
                  fetch-depth: 0

            - name: Claude Code Review
              uses: anthropics/claude-code-action@v1
              with:
                  anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
                  use_sticky_comment: true
                  track_progress: true
                  trigger_phrase: "@claude"
                  prompt: |
                      REPO: ${{ github.repository }}
                      PR NUMBER: ${{ github.event.pull_request.number }}

                      /review

                      Review this PR following @CLAUDE.md and @sdks/node/STYLEGUIDE.md. Focus on:

                      **Architecture (requires AI judgment):**
                      - Import boundaries: `runtime/**` â†› `domains/**`, no cross-domain `internal/**` imports
                      - ACL violations: duplicate `/generated/**` imports, non-ACL files importing generated types
                      - API design: type safety, interface contracts, error handling patterns

                      **ACL Patterns (if `*.acl.ts` changed):**
                      - Explicit `implements` over type aliases, proper naming (`VerbResourceRequest`, `ResourceResponse`)
                      - Enum pattern: `const X = {...} as const satisfies Record<keyof typeof GenEnum, string>`

                      **Code Quality:**
                      - Logic errors, edge cases, performance issues
                      - Test coverage gaps (E2E for features, unit for services/runtime)
                      - Security concerns, PII in logs

                      **Commit & Documentation:**
                      - Conventional commit scope and type correctness
                      - Breaking changes properly flagged (`!`)
                      - Missing documentation for public APIs

                      **Important:**
                      - Use `gh pr comment` for top-level feedback
                      - Use inline comments (mcp__github_inline_comment__create_inline_comment) to highlight specific code issues
                      - Post all feedback as GitHub comments, not as chat messages
                  claude_args: |
                      --model claude-sonnet-4-5-20250929 --max-turns 10
                      --allowedTools "mcp__github_inline_comment__create_inline_comment,Bash(gh pr comment:*),Bash(gh pr diff:*),Bash(gh pr view:*)"
