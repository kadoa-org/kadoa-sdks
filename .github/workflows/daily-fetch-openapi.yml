name: Daily fetch OpenAPI and open PR

on:
  schedule:
    - cron: "17 7 * * *"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  id-token: write

concurrency:
  group: daily-fetch-openapi-${{ github.ref }}
  cancel-in-progress: true

jobs:
  fetch-and-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.3.0"

      - name: Install deps (root)
        env:
          HUSKY: 0
        run: bun install --frozen-lockfile

      - name: Fetch latest OpenAPI spec
        env:
          KADOA_OPENAPI_ENDPOINT: https://api.kadoa.com/openapi
        run: |
          bun run kadoa-codegen fetch-spec -e "$KADOA_OPENAPI_ENDPOINT"

      - name: Detect changes
        id: diff
        run: |
          if git diff --quiet -- specs/openapi.json; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Analyze changes and create PR
        if: steps.diff.outputs.changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.RELEASE_PLEASE_TOKEN || secrets.GITHUB_TOKEN }}
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt: |
            The OpenAPI spec in specs/openapi.json has been updated. Your task is to analyze the changes and create a pull request.

            Follow these steps IN ORDER:

            1. Analyze the changes:
               - Run: git diff specs/openapi.json specs/openapi-metadata.json
               - Focus on: new/modified/removed endpoints, schemas, breaking changes

            2. Create and push a new branch:
               - git checkout -b ci/daily-openapi-update
               - git add specs/openapi.json specs/openapi-metadata.json
               - git commit -m "chore(spec): update OpenAPI spec"
               - git push -u origin ci/daily-openapi-update

            3. Create PR body file:
               - Use the Write tool to create /tmp/pr-body.md with this structure:

            ```markdown
            ## OpenAPI Spec Update

            This PR updates `specs/openapi.json` and `specs/openapi-metadata.json` with the latest version from `https://api.kadoa.com/openapi`.

            ### Summary of Changes

            [Write your detailed analysis here using markdown]

            Focus on:
            - **Schema Changes**: List structural changes to data models
            - **Endpoint Changes**: New/modified/removed API endpoints
            - **Breaking Changes**: Identify any backward-incompatible changes

            #### Metadata Changes
            - Checksum: [old] â†’ [new]
            - Fetched At: [timestamp]
            - API Version: [version]

            #### Impact Assessment
            - **Breaking Changes**: [Yes/No - explain if yes]
            - **New Endpoints**: [List or "None"]
            - **Modified Endpoints**: [List or "None"]
            - **Removed Endpoints**: [List or "None"]

            ---

            **Next Steps:** If merged, the spec fingerprint workflow will trigger SDK releases if needed.
            ```

            4. Create the PR:
               - Run: gh pr create --base main --head ci/daily-openapi-update --title "chore(spec): update OpenAPI spec" --body-file /tmp/pr-body.md --label ci

            IMPORTANT:
            - Use Write tool to create /tmp/pr-body.md (you have permission)
            - Use --body-file flag (NOT --body with inline text)
            - Keep analysis concise but thorough (300-500 words)
            - Don't try to edit the PR after creation
          claude_args: |
            --allowedTools "Read,Write(/tmp/*:*),Bash(git:*),Bash(gh:*)"
            --model claude-sonnet-4-5-20250929

      - name: No changes
        if: steps.diff.outputs.changed != 'true'
        run: echo "OpenAPI spec unchanged; no PR created."
