name: Daily fetch OpenAPI and open PR

on:
  schedule:
    - cron: "17 7 * * *"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  id-token: write

concurrency:
  group: daily-fetch-openapi-${{ github.ref }}
  cancel-in-progress: true

jobs:
  fetch-and-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.2.21"

      - name: Install deps (root)
        env:
          HUSKY: 0
        run: bun install --frozen-lockfile

      - name: Fetch latest OpenAPI spec
        env:
          KADOA_OPENAPI_ENDPOINT: https://api.kadoa.com/openapi
        run: |
          bun run kadoa-codegen fetch-spec -e "$KADOA_OPENAPI_ENDPOINT"

      - name: Detect changes
        id: diff
        run: |
          if git diff --quiet -- specs/openapi.json; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Analyze changes with Claude
        if: steps.diff.outputs.changed == 'true'
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt: |
            The OpenAPI spec in specs/openapi.json has been updated.

            Your task: Analyze the git diff and create a concise, structured markdown summary in analysis.md

            Steps:
            1. Run: git diff specs/openapi.json specs/openapi-metadata.json
            2. Analyze ALL changes thoroughly:
               - New/modified/removed endpoints (HTTP method + path)
               - Schema/model changes (structure, properties, types)
               - Breaking changes (anything that breaks existing clients)
            3. Write analysis to analysis.md using this EXACT structure:

            ```markdown
            ## Summary

            [One or two sentence overview of what changed - e.g., "Schema improvements to error handling with no breaking changes" or "Added 3 new endpoints for workflow management"]

            ### Endpoints

            | Status | Method | Path | Description |
            |--------|--------|------|-------------|
            | **Added** | `POST` | `/v4/example` | Creates a new example resource |
            | **Modified** | `GET` | `/v4/users` | Added optional `filter` query parameter |
            | **Removed** | `DELETE` | `/v3/legacy` | Deprecated endpoint removed |

            **If no endpoint changes exist, write:** `No endpoint changes.`

            ### Schema Changes

            | Schema | Change | Details |
            |--------|--------|---------|
            | `ErrorContext` | Modified | Added properties: `url`, `httpStatus`, `retryCount`, `details`, `timestamp` |
            | `WorkflowResponse` | Modified | Moved `errors` array from nested `lastJob` to top-level |
            | `UserProfile` | Added | New model for user profile data |
            | `LegacyModel` | Removed | Deprecated model removed |

            **If no schema changes exist, write:** `No schema changes.`

            ### Breaking Changes

            **ONLY include this section if breaking changes exist. If NO breaking changes, completely omit this entire section.**

            When breaking changes exist, use this format:

            > **WARNING: This update contains breaking changes that may affect existing clients.**

            **What breaks:**
            - [Specific change that breaks compatibility]
            - [Another breaking change]

            **Migration guide:**
            - [Step-by-step instructions to update client code]

            ### Impact Assessment

            - **Backward Compatible:** Yes / No
            - **Requires SDK Regeneration:** Yes / No
            - **Client Action Required:** None / Optional / Required
            ```

            FORMATTING REQUIREMENTS:
            - Use clean markdown tables (no emojis)
            - Use `code blocks` for all HTTP methods, paths, schema names, and field names
            - Use **bold** for Status column values and important warnings
            - Keep descriptions concise and technical
            - ONLY show Breaking Changes section if breaking changes exist
            - Skip metadata section entirely
            - Total length should be 200-400 words
            - Focus on what developers need to know
          claude_args: |
            --allowedTools "Read,Write,Bash(git diff:*)"
            --model claude-sonnet-4-5-20250929

      - name: Upload analysis artifact
        if: steps.diff.outputs.changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: openapi-analysis
          path: analysis.md
          retention-days: 1

      - name: Download analysis artifact
        if: steps.diff.outputs.changed == 'true'
        uses: actions/download-artifact@v4
        with:
          name: openapi-analysis

      - name: Prepare PR body
        if: steps.diff.outputs.changed == 'true'
        run: |
          # Read Claude's analysis
          ANALYSIS=$(cat analysis.md)

          # Create PR body file
          cat > pr-body.md << 'EOF'
          ## OpenAPI Spec Update

          This PR updates `specs/openapi.json` and `specs/openapi-metadata.json` with the latest version from `https://api.kadoa.com/openapi`.

          EOF

          echo "$ANALYSIS" >> pr-body.md

          cat >> pr-body.md << 'EOF'

          EOF

      - name: Create pull request
        if: steps.diff.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN || secrets.GITHUB_TOKEN }}
          commit-message: |
            chore(spec): update OpenAPI spec

            Updates specs/openapi.json and specs/openapi-metadata.json with the latest version from https://api.kadoa.com/openapi.

          title: "chore(spec): update OpenAPI spec"
          body-path: pr-body.md
          branch: ci/daily-openapi-update
          delete-branch: true
          labels: ci

      - name: No changes
        if: steps.diff.outputs.changed != 'true'
        run: echo "OpenAPI spec unchanged; no PR created."
