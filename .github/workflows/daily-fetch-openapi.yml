name: Daily fetch OpenAPI and open PR

on:
  schedule:
    - cron: "17 7 * * *"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  id-token: write

concurrency:
  group: daily-fetch-openapi-${{ github.ref }}
  cancel-in-progress: true

jobs:
  fetch-and-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.2.21"

      - name: Install deps (root)
        env:
          HUSKY: 0
        run: bun install --frozen-lockfile

      - name: Fetch latest OpenAPI spec
        env:
          KADOA_OPENAPI_ENDPOINT: https://api.kadoa.com/openapi
        run: |
          bun run kadoa-codegen fetch-spec -e "$KADOA_OPENAPI_ENDPOINT"

      - name: Detect changes
        id: diff
        run: |
          if git diff --quiet -- specs/openapi.json; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Analyze changes with Claude
        if: steps.diff.outputs.changed == 'true'
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt: |
            The OpenAPI spec in specs/openapi.json has been updated.

            Your task: Analyze the git diff and create a concise, visual markdown summary in analysis.md

            Steps:
            1. Run: git diff specs/openapi.json specs/openapi-metadata.json
            2. Analyze ALL changes thoroughly:
               - New/modified/removed endpoints (HTTP method + path)
               - Schema/model changes (structure, properties, types)
               - Breaking changes (anything that breaks existing clients)
               - Metadata updates
            3. Write analysis to analysis.md using this EXACT structure:

            ```markdown
            ## 📊 API Changes Overview

            > [One sentence summary of the update - e.g., "Minor schema enhancements with no breaking changes" or "Major update with 3 new endpoints"]

            ### 🔗 Endpoints

            | Status | Method | Path | Changes |
            |--------|--------|------|---------|
            | ➕ **Added** | `POST` | `/v4/example` | New endpoint for X |
            | ✏️ **Modified** | `GET` | `/v4/users` | Added optional `filter` parameter |
            | ❌ **Removed** | `DELETE` | `/v3/legacy` | Deprecated endpoint removed |

            **Note:** If no endpoint changes, replace the table with: `No endpoint changes.`

            ### 📦 Schema Changes

            | Schema | Type | Description |
            |--------|------|-------------|
            | `ErrorContext` | Modified | Added `url`, `httpStatus`, `retryCount`, `details`, `timestamp` properties |
            | `WorkflowResponse` | Modified | Moved `errors` from nested `lastJob` to top-level |
            | `NewModel` | Added | New data model for feature X |

            **Note:** If no schema changes, replace the table with: `No schema changes.`

            ### ⚠️ Breaking Changes

            **Only include this section if there ARE breaking changes. If NO breaking changes, completely omit this section.**

            If breaking changes exist, use this format:
            ```
            > **⚠️ WARNING: This update contains breaking changes**

            - **[What breaks]**: [Explanation of impact]
            - **Migration**: [How to fix]
            ```

            ### 📋 Metadata

            | Field | Value |
            |-------|-------|
            | **API Version** | `3.0.0` → `3.0.0` (or show change if different) |
            | **Checksum** | `76a4f...` → `8db83...` |
            | **Fetched At** | `2025-10-13T09:38:53Z` |

            ### 🎯 Impact Summary

            - **Backward Compatible**: Yes/No
            - **SDK Regeneration Required**: Yes/No
            - **Client Code Changes**: None/Optional/Required
            ```

            IMPORTANT FORMATTING RULES:
            - Use emojis for visual hierarchy (📊 🔗 📦 ⚠️ 📋 🎯)
            - Use GitHub-flavored markdown tables
            - Use ➕ ✏️ ❌ status indicators in endpoint table
            - Use `code blocks` for methods, paths, and schema names
            - Bold important text with **bold**
            - ONLY include "Breaking Changes" section if breaking changes exist
            - Keep total length under 500 words
            - Be precise and developer-focused
          claude_args: |
            --allowedTools "Read,Write,Bash(git diff:*)"
            --model claude-sonnet-4-5-20250929

      - name: Upload analysis artifact
        if: steps.diff.outputs.changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: openapi-analysis
          path: analysis.md
          retention-days: 1

      - name: Download analysis artifact
        if: steps.diff.outputs.changed == 'true'
        uses: actions/download-artifact@v4
        with:
          name: openapi-analysis

      - name: Prepare PR body
        if: steps.diff.outputs.changed == 'true'
        run: |
          # Read Claude's analysis
          ANALYSIS=$(cat analysis.md)

          # Create PR body file
          cat > pr-body.md << 'EOF'
          ## OpenAPI Spec Update

          This PR updates `specs/openapi.json` and `specs/openapi-metadata.json` with the latest version from `https://api.kadoa.com/openapi`.

          EOF

          echo "$ANALYSIS" >> pr-body.md

          cat >> pr-body.md << 'EOF'

          ---

          **Next Steps:** If merged, the spec fingerprint workflow will trigger SDK releases if needed.

          🤖 Generated with [Claude Code](https://claude.com/claude-code)
          EOF

      - name: Create pull request
        if: steps.diff.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN || secrets.GITHUB_TOKEN }}
          commit-message: |
            chore(spec): update OpenAPI spec

            Updates specs/openapi.json and specs/openapi-metadata.json with the latest version from https://api.kadoa.com/openapi.

            🤖 Generated with [Claude Code](https://claude.com/claude-code)

            Co-Authored-By: Claude <noreply@anthropic.com>
          title: "chore(spec): update OpenAPI spec"
          body-path: pr-body.md
          branch: ci/daily-openapi-update
          delete-branch: true
          labels: ci

      - name: No changes
        if: steps.diff.outputs.changed != 'true'
        run: echo "OpenAPI spec unchanged; no PR created."
